{"task_id": "HumanEval/0", "solution": "from typing import List"}
{"task_id": "HumanEval/1", "solution": "from typing import List"}
{"task_id": "HumanEval/2", "solution": ""}
{"task_id": "HumanEval/3", "solution": "from typing import List"}
{"task_id": "HumanEval/4", "solution": "from typing import List"}
{"task_id": "HumanEval/5", "solution": "from typing import List"}
{"task_id": "HumanEval/6", "solution": "from typing import List"}
{"task_id": "HumanEval/7", "solution": "from typing import List"}
{"task_id": "HumanEval/8", "solution": "from typing import List, Tuple"}
{"task_id": "HumanEval/9", "solution": "from typing import List, Tuple"}
{"task_id": "HumanEval/10", "solution": ""}
{"task_id": "HumanEval/11", "solution": "from typing import List"}
{"task_id": "HumanEval/12", "solution": "from typing import List, Optional"}
{"task_id": "HumanEval/13", "solution": ""}
{"task_id": "HumanEval/14", "solution": "from typing import List"}
{"task_id": "HumanEval/15", "solution": "def string_sequence( n ):\n    s = \"\"\n    for i in range( n ):\n        s += str( i ) + \" \"\n    return s"}
{"task_id": "HumanEval/16", "solution": ""}
{"task_id": "HumanEval/17", "solution": "from typing import List"}
{"task_id": "HumanEval/18", "solution": ""}
{"task_id": "HumanEval/19", "solution": "from typing import List"}
{"task_id": "HumanEval/20", "solution": "from typing import List, Tuple"}
{"task_id": "HumanEval/21", "solution": "from typing import List"}
{"task_id": "HumanEval/22", "solution": "from typing import List, Any"}
{"task_id": "HumanEval/23", "solution": ""}
{"task_id": "HumanEval/24", "solution": ""}
{"task_id": "HumanEval/25", "solution": "from typing import List"}
{"task_id": "HumanEval/26", "solution": "from typing import List"}
{"task_id": "HumanEval/27", "solution": ""}
{"task_id": "HumanEval/28", "solution": "from typing import List"}
{"task_id": "HumanEval/29", "solution": "from typing import List"}
{"task_id": "HumanEval/30", "solution": ""}
{"task_id": "HumanEval/31", "solution": ""}
{"task_id": "HumanEval/32", "solution": "import math"}
{"task_id": "HumanEval/33", "solution": ""}
{"task_id": "HumanEval/34", "solution": ""}
{"task_id": "HumanEval/35", "solution": ""}
{"task_id": "HumanEval/36", "solution": ""}
{"task_id": "HumanEval/37", "solution": "def sort_even( l ):\n    lnew = l[::2]\n    lnew.sort()\n    lnew += l[::2]\n    return lnew"}
{"task_id": "HumanEval/38", "solution": ""}
{"task_id": "HumanEval/39", "solution": ""}
{"task_id": "HumanEval/40", "solution": "def triples_sum_to_zero( l ):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input and returns True if there are three distinct elements in the list that sum to zero, and False otherwise.\n    \"\"\"\n    for i in range(len( l ) ):\n        for j in range( i +1 ):\n            for k in range( j +1 ):\n                if l[ i ] + l[ j ] + l[ k ] ==  0:\n                    return True\n    return False"}
{"task_id": "HumanEval/41", "solution": ""}
{"task_id": "HumanEval/42", "solution": ""}
{"task_id": "HumanEval/43", "solution": "def pairs_sum_to_zero( l ):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input and returns True if there are two distinct elements in the list that sum to zero, and False otherwise.\n    \"\"\"\n    for i in l:\n        for j in l:\n            if i + j == 0 and i!= j:\n                return True\n    return False"}
{"task_id": "HumanEval/44", "solution": "def change_base(x: int, base: int):\n    \"\"\"Change base of input number x to base base.\n    return string representation after the conversion.\n    base numbers are less than or equal to 10.\n    >>> change base(8, 3)\n    '22'\n    >>> change base(8, 2)\n    '1000\"\n    \"\"\"\n    if base > 10 or base <= 1:\n        return None"}
{"task_id": "HumanEval/45", "solution": ""}
{"task_id": "HumanEval/46", "solution": ""}
{"task_id": "HumanEval/47", "solution": ""}
{"task_id": "HumanEval/48", "solution": ""}
{"task_id": "HumanEval/49", "solution": ""}
{"task_id": "HumanEval/50", "solution": ""}
{"task_id": "HumanEval/51", "solution": ""}
{"task_id": "HumanEval/52", "solution": "def below_threshold( l, t ):\n    for i in l:\n        if i >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "solution": ""}
{"task_id": "HumanEval/54", "solution": "def same_chars( s0: str, s1: str ):\n    \"\"\"\n    Check if two words have the same characters\n    \"\"\"\n    return set( s0 ) == set( s1 )"}
{"task_id": "HumanEval/55", "solution": ""}
{"task_id": "HumanEval/56", "solution": ""}
{"task_id": "HumanEval/57", "solution": "def monotonic( l ):\n    return all( l[i] <= l[i+1] for i in range(len( l ) -1 ) ) or all( l[i] >= l[i+1] for i in range(len( l ) -1 ) )"}
{"task_id": "HumanEval/58", "solution": ""}
{"task_id": "HumanEval/59", "solution": ""}
{"task_id": "HumanEval/60", "solution": ""}
{"task_id": "HumanEval/61", "solution": ""}
{"task_id": "HumanEval/62", "solution": ""}
{"task_id": "HumanEval/63", "solution": ""}
{"task_id": "HumanEval/64", "solution": "FIX = \"\"\"\nAdd more test cases.\n\"\"\""}
{"task_id": "HumanEval/65", "solution": ""}
{"task_id": "HumanEval/66", "solution": ""}
{"task_id": "HumanEval/67", "solution": ""}
{"task_id": "HumanEval/68", "solution": ""}
{"task_id": "HumanEval/69", "solution": ""}
{"task_id": "HumanEval/70", "solution": ""}
{"task_id": "HumanEval/71", "solution": ""}
{"task_id": "HumanEval/72", "solution": ""}
{"task_id": "HumanEval/73", "solution": ""}
{"task_id": "HumanEval/74", "solution": "match(lst1, lst2):\n    total_1 = sum(len(i) for i in lst1)\n    total_2 = sum(len(i) for i in lst2)\n    if total_1 < total_2:\n        return lst1\n    elif total_2 < total_1:\n        return lst2\n    else:\n        return lst1\ntotal_mat"}
{"task_id": "HumanEval/75", "solution": ""}
{"task_id": "HumanEval/76", "solution": "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,4) => true\n    is_simple_  power(2,2) => true\n    is_simple_power(8,2) => true\n    \"\"\"\n    return True if x == n else False"}
{"task_id": "HumanEval/77", "solution": ""}
{"task_id": "HumanEval/78", "solution": ""}
{"task_id": "HumanEval/79", "solution": ""}
{"task_id": "HumanEval/80", "solution": ""}
{"task_id": "HumanEval/81", "solution": ""}
{"task_id": "HumanEval/82", "solution": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    return True if len(string) in primes else False"}
{"task_id": "HumanEval/83", "solution": ""}
{"task_id": "HumanEval/84", "solution": ""}
{"task_id": "HumanEval/85", "solution": ""}
{"task_id": "HumanEval/86", "solution": ""}
{"task_id": "HumanEval/87", "solution": ""}
{"task_id": "HumanEval/88", "solution": ""}
{"task_id": "HumanEval/89", "solution": ""}
{"task_id": "HumanEval/90", "solution": ""}
{"task_id": "HumanEval/91", "solution": ""}
{"task_id": "HumanEval/92", "solution": "int(x, y, z):\n    return True if x + y == z or y + z == x or z + x == y else False\ndef any"}
{"task_id": "HumanEval/93", "solution": ""}
{"task_id": "HumanEval/94", "solution": ""}
{"task_id": "HumanEval/95", "solution": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower case or all keys are strings in upper case, else return False.\n    The function should return False if the given dictionary is empty.\n    \"\"\"\n    if not dict:\n        return False\n    else:\n        lower_case = True\n        upper_case = True\n        for key in dict:\n            if not key.lower() == key:\n                lower_case = False\n            if not key.upper() == key:\n                uppercase = False\n        return lower_case or uppercase"}
{"task_id": "HumanEval/96", "solution": "def count_up_to( n ):\n    primes = []\n    for i in range( n ):\n        if is_prime( i ):\n            primes.append( i )\n    return primes"}
{"task_id": "HumanEval/97", "solution": ""}
{"task_id": "HumanEval/98", "solution": ""}
{"task_id": "HumanEval/99", "solution": "def closest_integer(value):\n    value = float(value)\n    if value >  (value//1):\n        return int(value//1 +1)\n    else:\n        return int(value//1)"}
{"task_id": "HumanEval/100", "solution": ""}
{"task_id": "HumanEval/101", "solution": ""}
{"task_id": "HumanEval/102", "solution": ""}
{"task_id": "HumanEval/103", "solution": ""}
{"task_id": "HumanEval/104", "solution": ""}
{"task_id": "HumanEval/105", "solution": ""}
{"task_id": "HumanEval/106", "solution": ""}
{"task_id": "HumanEval/107", "solution": ""}
{"task_id": "HumanEval/108", "solution": ""}
{"task_id": "HumanEval/109", "solution": ""}
{"task_id": "HumanEval/110", "solution": ""}
{"task_id": "HumanEval/111", "solution": ""}
{"task_id": "HumanEval/112", "solution": ""}
{"task_id": "HumanEval/113", "solution": ""}
{"task_id": "HumanEval/114", "solution": "def minSubArraySum( nums ):\n    minsum = float('inf')\n    for i in range(len( nums ) ):\n        sum = nums[i]\n        if sum < minsum: minsum = sum\n        for j in range( i +1 ):\n            sum += nums[j]\n            if sum < minsum: minsum = sum\n    return minsum"}
{"task_id": "HumanEval/115", "solution": "import math"}
{"task_id": "HumanEval/116", "solution": ""}
{"task_id": "HumanEval/117", "solution": ""}
{"task_id": "HumanEval/118", "solution": ""}
{"task_id": "HumanEval/119", "solution": ""}
{"task_id": "HumanEval/120", "solution": ""}
{"task_id": "HumanEval/121", "solution": ""}
{"task_id": "HumanEval/122", "solution": ""}
{"task_id": "HumanEval/123", "solution": ""}
{"task_id": "HumanEval/124", "solution": ""}
{"task_id": "HumanEval/125", "solution": ""}
{"task_id": "HumanEval/126", "solution": "t):\n    return lst == sorted(lst)\ndef is_sorted(l"}
{"task_id": "HumanEval/127", "solution": "def intersection(interval1, interval2):\n    start1 = interval1[0]\n    end1 = interval2[0]\n    start2 = interval2[1]\n    end2 = interval1[1]\n    if start1 <= start2 <= end1 <= end2 or start2 <= start1 <= end2 <= end1:\n        return \"NO\""}
{"task_id": "HumanEval/128", "solution": ""}
{"task_id": "HumanEval/129", "solution": ""}
{"task_id": "HumanEval/130", "solution": ""}
{"task_id": "HumanEval/131", "solution": ""}
{"task_id": "HumanEval/132", "solution": ""}
{"task_id": "HumanEval/133", "solution": ""}
{"task_id": "HumanEval/134", "solution": ""}
{"task_id": "HumanEval/135", "solution": ""}
{"task_id": "HumanEval/136", "solution": ""}
{"task_id": "HumanEval/137", "solution": ""}
{"task_id": "HumanEval/138", "solution": ""}
{"task_id": "HumanEval/139", "solution": ""}
{"task_id": "HumanEval/140", "solution": ""}
{"task_id": "HumanEval/141", "solution": ""}
{"task_id": "HumanEval/142", "solution": ""}
{"task_id": "HumanEval/143", "solution": ""}
{"task_id": "HumanEval/144", "solution": ""}
{"task_id": "HumanEval/145", "solution": ""}
{"task_id": "HumanEval/146", "solution": ""}
{"task_id": "HumanEval/147", "solution": ""}
{"task_id": "HumanEval/148", "solution": ""}
{"task_id": "HumanEval/149", "solution": ""}
{"task_id": "HumanEval/150", "solution": ""}
{"task_id": "HumanEval/151", "solution": ""}
{"task_id": "HumanEval/152", "solution": "def compare(game, guess):\n    return [abs(g - s) for g, s in zip(game, guess)]"}
{"task_id": "HumanEval/153", "solution": ""}
{"task_id": "HumanEval/154", "solution": ""}
{"task_id": "HumanEval/155", "solution": ""}
{"task_id": "HumanEval/156", "solution": ""}
{"task_id": "HumanEval/157", "solution": ""}
{"task_id": "HumanEval/158", "solution": ""}
{"task_id": "HumanEval/159", "solution": ""}
{"task_id": "HumanEval/160", "solution": ""}
{"task_id": "HumanEval/161", "solution": ""}
{"task_id": "HumanEval/162", "solution": ""}
{"task_id": "HumanEval/163", "solution": ""}
