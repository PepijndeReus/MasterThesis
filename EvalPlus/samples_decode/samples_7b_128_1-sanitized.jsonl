{"task_id": "HumanEval/0", "solution": "from typing import List"}
{"task_id": "HumanEval/1", "solution": "from typing import List"}
{"task_id": "HumanEval/2", "solution": ""}
{"task_id": "HumanEval/3", "solution": "from typing import List"}
{"task_id": "HumanEval/4", "solution": "from typing import List"}
{"task_id": "HumanEval/5", "solution": "from typing import List"}
{"task_id": "HumanEval/6", "solution": "from typing import List"}
{"task_id": "HumanEval/7", "solution": "from typing import List"}
{"task_id": "HumanEval/8", "solution": "from typing import List, Tuple"}
{"task_id": "HumanEval/9", "solution": "from typing import List, Tuple"}
{"task_id": "HumanEval/10", "solution": ""}
{"task_id": "HumanEval/11", "solution": "from typing import List"}
{"task_id": "HumanEval/12", "solution": "from typing import List, Optional"}
{"task_id": "HumanEval/13", "solution": ""}
{"task_id": "HumanEval/14", "solution": "from typing import List"}
{"task_id": "HumanEval/15", "solution": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    if n == 0:\n        return '0'\n    else:\n        return string_sequence(n -1) +'' + str(n)"}
{"task_id": "HumanEval/16", "solution": ""}
{"task_id": "HumanEval/17", "solution": "from typing import List"}
{"task_id": "HumanEval/18", "solution": ""}
{"task_id": "HumanEval/19", "solution": "from typing import List"}
{"task_id": "HumanEval/20", "solution": "from typing import List, Tuple"}
{"task_id": "HumanEval/21", "solution": "from typing import List"}
{"task_id": "HumanEval/22", "solution": "from typing import List, Any"}
{"task_id": "HumanEval/23", "solution": ""}
{"task_id": "HumanEval/24", "solution": ""}
{"task_id": "HumanEval/25", "solution": "from typing import List"}
{"task_id": "HumanEval/26", "solution": ""}
{"task_id": "HumanEval/27", "solution": ""}
{"task_id": "HumanEval/28", "solution": "from typing import List"}
{"task_id": "HumanEval/29", "solution": "from typing import List"}
{"task_id": "HumanEval/30", "solution": ""}
{"task_id": "HumanEval/31", "solution": ""}
{"task_id": "HumanEval/32", "solution": "import math"}
{"task_id": "HumanEval/33", "solution": ""}
{"task_id": "HumanEval/34", "solution": ""}
{"task_id": "HumanEval/35", "solution": ""}
{"task_id": "HumanEval/36", "solution": ""}
{"task_id": "HumanEval/37", "solution": ""}
{"task_id": "HumanEval/38", "solution": ""}
{"task_id": "HumanEval/39", "solution": ""}
{"task_id": "HumanEval/40", "solution": ""}
{"task_id": "HumanEval/41", "solution": ""}
{"task_id": "HumanEval/42", "solution": ""}
{"task_id": "HumanEval/43", "solution": ""}
{"task_id": "HumanEval/44", "solution": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2 or base > 9:\n        return \"Base must be between 2 and 9\""}
{"task_id": "HumanEval/45", "solution": ""}
{"task_id": "HumanEval/46", "solution": ""}
{"task_id": "HumanEval/47", "solution": ""}
{"task_id": "HumanEval/48", "solution": ""}
{"task_id": "HumanEval/49", "solution": ""}
{"task_id": "HumanEval/50", "solution": ""}
{"task_id": "HumanEval/51", "solution": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    for v in vowels:\n        text = text.replace(v, '')\n    return text"}
{"task_id": "HumanEval/52", "solution": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 10, 4, 10], 5)\n    False\n    \"\"\"\n    for i in l:\n        if i >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "solution": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "solution": ""}
{"task_id": "HumanEval/55", "solution": ""}
{"task_id": "HumanEval/56", "solution": ""}
{"task_id": "HumanEval/57", "solution": ""}
{"task_id": "HumanEval/58", "solution": ""}
{"task_id": "HumanEval/59", "solution": ""}
{"task_id": "HumanEval/60", "solution": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return n + sum_to_n(n-1)"}
{"task_id": "HumanEval/61", "solution": ""}
{"task_id": "HumanEval/62", "solution": ""}
{"task_id": "HumanEval/63", "solution": ""}
{"task_id": "HumanEval/64", "solution": "FIX = \"\"\"\nAdd more test cases.\n\"\"\""}
{"task_id": "HumanEval/65", "solution": ""}
{"task_id": "HumanEval/66", "solution": ""}
{"task_id": "HumanEval/67", "solution": ""}
{"task_id": "HumanEval/68", "solution": ""}
{"task_id": "HumanEval/69", "solution": ""}
{"task_id": "HumanEval/70", "solution": ""}
{"task_id": "HumanEval/71", "solution": ""}
{"task_id": "HumanEval/72", "solution": "_it_fly(q,w):\n    return sum(q)<=w and q==q[::-1]\n\ndef wi"}
{"task_id": "HumanEval/73", "solution": ""}
{"task_id": "HumanEval/74", "solution": ""}
{"task_id": "HumanEval/75", "solution": ""}
{"task_id": "HumanEval/76", "solution": ""}
{"task_id": "HumanEval/77", "solution": ""}
{"task_id": "HumanEval/78", "solution": ""}
{"task_id": "HumanEval/79", "solution": ""}
{"task_id": "HumanEval/80", "solution": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_ happy(abcd) => True\n    is_ happy(aabb) => False\n    is_ happy(adb) => True\n    is_ happy(xyy) => False\n    \"\"\"\n    if len(s) <3:\n        return False"}
{"task_id": "HumanEval/81", "solution": ""}
{"task_id": "HumanEval/82", "solution": ""}
{"task_id": "HumanEval/83", "solution": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    return 2 * 9 * 10 ** (n-2)"}
{"task_id": "HumanEval/84", "solution": ""}
{"task_id": "HumanEval/85", "solution": ""}
{"task_id": "HumanEval/86", "solution": ""}
{"task_id": "HumanEval/87", "solution": ""}
{"task_id": "HumanEval/88", "solution": ""}
{"task_id": "HumanEval/89", "solution": ""}
{"task_id": "HumanEval/90", "solution": "def next_smallest(lst):\n    if len(lst) < 1:\n        return None\n    elif len(lst) == 1:\n        return None\n    else:\n        return min(set(lst[1:]))"}
{"task_id": "HumanEval/91", "solution": ""}
{"task_id": "HumanEval/92", "solution": "int(x,y,z):\n    if x+y==z or y+z==x or x+z==y and x%1==0 and y%1==0 and z%1==0:\n        return True\n    else:\n        return False\n\ndef an"}
{"task_id": "HumanEval/93", "solution": ""}
{"task_id": "HumanEval/94", "solution": ""}
{"task_id": "HumanEval/95", "solution": ""}
{"task_id": "HumanEval/96", "solution": ""}
{"task_id": "HumanEval/97", "solution": ""}
{"task_id": "HumanEval/98", "solution": ""}
{"task_id": "HumanEval/99", "solution": ""}
{"task_id": "HumanEval/100", "solution": ""}
{"task_id": "HumanEval/101", "solution": "def words_string(s):\n    return s.split()"}
{"task_id": "HumanEval/102", "solution": ""}
{"task_id": "HumanEval/103", "solution": ""}
{"task_id": "HumanEval/104", "solution": ""}
{"task_id": "HumanEval/105", "solution": ""}
{"task_id": "HumanEval/106", "solution": ""}
{"task_id": "HumanEval/107", "solution": ""}
{"task_id": "HumanEval/108", "solution": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 0.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    return sum"}
{"task_id": "HumanEval/109", "solution": ""}
{"task_id": "HumanEval/110", "solution": ""}
{"task_id": "HumanEval/111", "solution": ""}
{"task_id": "HumanEval/112", "solution": ""}
{"task_id": "HumanEval/113", "solution": ""}
{"task_id": "HumanEval/114", "solution": ""}
{"task_id": "HumanEval/115", "solution": "import math"}
{"task_id": "HumanEval/116", "solution": ""}
{"task_id": "HumanEval/117", "solution": ""}
{"task_id": "HumanEval/118", "solution": "def get_closest_vowel(word):\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxz'\n    vowels_in_word = [i for i in word if i in vowels]\n    consonants_in_word = [i for i in word if i in consonants]\n    if not consonants_in_word:\n        return ''\n    else:\n        consonants_in_word = consonants_in_word[0]\n        consonants_in_word_"}
{"task_id": "HumanEval/119", "solution": ""}
{"task_id": "HumanEval/120", "solution": ""}
{"task_id": "HumanEval/121", "solution": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,8,7,1]) ==> 12\n    solution([3,3,3,3,3]) ==> 9\n    solution([30,13,24,321]) ==> 0\n    \"\"\"\n    return sum([x for i,x in enumerate(lst) if i%2==0 and x%2==1])"}
{"task_id": "HumanEval/122", "solution": ""}
{"task_id": "HumanEval/123", "solution": ""}
{"task_id": "HumanEval/124", "solution": ""}
{"task_id": "HumanEval/125", "solution": "split_words(txt):\n    if not txt:\n        return 0\n    elif not txt.isspace():\n        return txt.split()\n    else:\n        return txt.split(',')\n\nde"}
{"task_id": "HumanEval/126", "solution": "t):\n    return all(a <= b for a, b in zip(lst, lst[1:]))\n\ndef is_sorted("}
{"task_id": "HumanEval/127", "solution": ""}
{"task_id": "HumanEval/128", "solution": "def prod_signs(arr):\n    if not arr:\n        return None\n    else:\n        product = 1\n        for i in arr:\n            product *= i\n        product *= 1 if product > 0 else -1\n        return product"}
{"task_id": "HumanEval/129", "solution": ""}
{"task_id": "HumanEval/130", "solution": ""}
{"task_id": "HumanEval/131", "solution": ""}
{"task_id": "HumanEval/132", "solution": ""}
{"task_id": "HumanEval/133", "solution": ""}
{"task_id": "HumanEval/134", "solution": "k_if_last_char_is_a_letter(txt):\n    return not txt or not txt[-1].isalpha() or txt[-1] =='' or txt[-1] == txt[-2]\n\ndef ch"}
{"task_id": "HumanEval/135", "solution": ""}
{"task_id": "HumanEval/136", "solution": ""}
{"task_id": "HumanEval/137", "solution": "are_one(a, b):\n    if type(a) == type(b):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    else:\n        return None\n\ndef co"}
{"task_id": "HumanEval/138", "solution": ""}
{"task_id": "HumanEval/139", "solution": "def special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "solution": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 1 space, then replace all spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_ spaces(\"Example 1\") == \"Example_1\"\n    fix_ spaces(\" Example 2\") == \"_Example_2\"\n    fix_ spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\")"}
{"task_id": "HumanEval/141", "solution": ""}
{"task_id": "HumanEval/142", "solution": ""}
{"task_id": "HumanEval/143", "solution": ""}
{"task_id": "HumanEval/144", "solution": ""}
{"task_id": "HumanEval/145", "solution": ""}
{"task_id": "HumanEval/146", "solution": ""}
{"task_id": "HumanEval/147", "solution": ""}
{"task_id": "HumanEval/148", "solution": ""}
{"task_id": "HumanEval/149", "solution": ""}
{"task_id": "HumanEval/150", "solution": ""}
{"task_id": "HumanEval/151", "solution": ""}
{"task_id": "HumanEval/152", "solution": ""}
{"task_id": "HumanEval/153", "solution": ""}
{"task_id": "HumanEval/154", "solution": ""}
{"task_id": "HumanEval/155", "solution": ""}
{"task_id": "HumanEval/156", "solution": ""}
{"task_id": "HumanEval/157", "solution": ""}
{"task_id": "HumanEval/158", "solution": ""}
{"task_id": "HumanEval/159", "solution": ""}
{"task_id": "HumanEval/160", "solution": ""}
{"task_id": "HumanEval/161", "solution": ""}
{"task_id": "HumanEval/162", "solution": ""}
{"task_id": "HumanEval/163", "solution": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4,6,8]\n    generate_integers(8, 2) => [2,4,6,8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    if b < a:\n        return []\n    else:\n        if b %2 ==0:\n            return [b] + generate_"}
