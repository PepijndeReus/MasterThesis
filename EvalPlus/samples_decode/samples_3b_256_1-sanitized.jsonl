{"task_id": "HumanEval/0", "solution": "from typing import List"}
{"task_id": "HumanEval/1", "solution": "from typing import List"}
{"task_id": "HumanEval/2", "solution": ""}
{"task_id": "HumanEval/3", "solution": "from typing import List"}
{"task_id": "HumanEval/4", "solution": "from typing import List"}
{"task_id": "HumanEval/5", "solution": "from typing import List"}
{"task_id": "HumanEval/6", "solution": "from collections import namedtuple\nfrom operator import attrgetter\nfrom enum import Enum\nfrom copy import copy\nfrom math import inf\nfrom random import choice, randint\nfrom time import time\nfrom collections import Counter\nfrom operator import attrgetter\nfrom enum import Enum\nfrom copy import copy\nfrom math import inf\nfrom random import choice, randint\nfrom time import time\nfrom collections import Counter\nfrom operator import attrgetter\nfrom enum import Enum\nfrom copy import copy\nfrom math import inf\nfrom random import choice, randint\nfrom time import time\nfrom collections import Counter\nfrom operator import attrgetter\nfrom enum import Enum\nfrom copy import copy\nfrom math import inf\nfrom random import choice, randint\nfrom time import time\nfrom collections import Counter\nfrom operator import attrgetter\nfrom enum import Enum\nfrom copy import copy\nfrom math import inf\nfrom random import choice, randint\nfrom time import time\nfrom collections import Counter\nfrom operator import attrgetter\nfrom enum import Enum\nfrom copy import copy\nfrom math import inf\nfrom random import choice, randint\nfrom time import time"}
{"task_id": "HumanEval/7", "solution": ""}
{"task_id": "HumanEval/8", "solution": "from sum_product import sum_product\nfrom typing import List, Tuple"}
{"task_id": "HumanEval/9", "solution": "from typing import List, Tuple"}
{"task_id": "HumanEval/10", "solution": ""}
{"task_id": "HumanEval/11", "solution": "from typing import List"}
{"task_id": "HumanEval/12", "solution": "from typing import List, Optional, Any, cast\nfrom collections import namedtuple\nfrom operator import attrgetter\nfrom random import randint\nfrom math import floor\nfrom time import sleep\nfrom enum import Enum, auto\nfrom collections import namedtuple\nfrom operator import attrgetter\nfrom random import randint\nfrom time import sleep\nfrom enum import Enum, auto\nfrom collections import namedtuple\nfrom operator import attrgetter\nfrom random import randint\nfrom time import sleep\nfrom enum import Enum, auto\nfrom collections import namedtuple\nfrom operator import attrgetter\nfrom random import randint\nfrom time import sleep\nfrom enum import Enum, auto\nfrom collections import namedtuple\nfrom operator import attrgetter\nfrom random import randint\nfrom time import sleep\nfrom enum import Enum, auto\nfrom collections import namedtuple\nfrom operator import attrgetter\nfrom random import randint\nfrom time import sleep\nfrom enum import Enum, auto\nfrom collections import namedtuple\nfrom operator import attrgetter\nfrom random import randint\nfrom time import sleep\nfrom enum import Enum, auto\nfrom collections import namedtuple\nfrom operator import attrgetter"}
{"task_id": "HumanEval/13", "solution": ""}
{"task_id": "HumanEval/14", "solution": "from typing import List"}
{"task_id": "HumanEval/15", "solution": ""}
{"task_id": "HumanEval/16", "solution": "from typing import List"}
{"task_id": "HumanEval/17", "solution": "from collections import namedtuple\nfrom operator import attrgetter\nfrom operator import methodcaller\nfrom operator import itemgetter\nfrom operator import attrgetter\nfrom operator import methodcaller\nfrom operator import itemgetter\nfrom operator import attrgetter\nfrom operator import methodcaller\nfrom operator import itemgetter\nfrom operator import attrgetter\nfrom operator import methodcaller\nfrom operator import itemgetter\nfrom operator import attrgetter\nfrom operator import methodcaller\nfrom operator import itemgetter\nfrom operator import attrgetter\nfrom operator import methodcaller\nfrom operator import itemgetter\nfrom operator import attrgetter\nfrom operator import methodcaller\nfrom operator import itemgetter\nfrom operator import attrgetter\nfrom operator import methodcaller\nfrom operator import itemgetter\nfrom operator import attrgetter\nfrom operator import methodcaller\nfrom operator import itemgetter\nfrom operator import attrgetter\nfrom operator import methodcaller\nfrom operator import itemgetter\nfrom operator import attrgetter\nfrom operator import methodcaller\nfrom operator import itemgetter\nfrom operator import attrgetter\nfrom operator import methodcaller\nfrom operator import itemgetter\nfrom operator import attrgetter\nfrom operator import methodcaller\nfrom operator import itemgetter\nfrom operator import attrgetter\nfrom operator import method"}
{"task_id": "HumanEval/18", "solution": ""}
{"task_id": "HumanEval/19", "solution": "from typing import List"}
{"task_id": "HumanEval/20", "solution": "from typing import List, Tuple"}
{"task_id": "HumanEval/21", "solution": "from typing import List"}
{"task_id": "HumanEval/22", "solution": "from typing import List, Any"}
{"task_id": "HumanEval/23", "solution": ""}
{"task_id": "HumanEval/24", "solution": ""}
{"task_id": "HumanEval/25", "solution": "from typing import List"}
{"task_id": "HumanEval/26", "solution": "from typing import List"}
{"task_id": "HumanEval/27", "solution": ""}
{"task_id": "HumanEval/28", "solution": "from typing import List"}
{"task_id": "HumanEval/29", "solution": "from typing import List"}
{"task_id": "HumanEval/30", "solution": ""}
{"task_id": "HumanEval/31", "solution": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "solution": "import math"}
{"task_id": "HumanEval/33", "solution": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l_new = l.copy()\n    l_new = l_new[::3]\n    l_new.sort()\n    l_new = l_new[::3] + l_new[1::3] + l_new[2::3]\n    return l_new"}
{"task_id": "HumanEval/34", "solution": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))"}
{"task_id": "HumanEval/35", "solution": ""}
{"task_id": "HumanEval/36", "solution": ""}
{"task_id": "HumanEval/37", "solution": ""}
{"task_id": "HumanEval/38", "solution": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n# split string to groups. Each of length 3.\n    groups = [s[3 * i:min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n# cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [group[2:] + group[:2] if len(group) == 3 else group for group in groups]\n    return groups"}
{"task_id": "HumanEval/39", "solution": ""}
{"task_id": "HumanEval/40", "solution": ""}
{"task_id": "HumanEval/41", "solution": ""}
{"task_id": "HumanEval/42", "solution": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "solution": ""}
{"task_id": "HumanEval/44", "solution": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2 or base > 10:\n        raise ValueError(\"base must be between 2 and 10\")\n    if x < 0:\n        raise ValueError(\"x must be non-negative\")\n    if base == 10:\n        return str(x)\n    else:\n        s = \"\"\n        while x > 0:\n            s = str(x % base) + s\n            x //= base\n        return s"}
{"task_id": "HumanEval/45", "solution": ""}
{"task_id": "HumanEval/46", "solution": ""}
{"task_id": "HumanEval/47", "solution": ""}
{"task_id": "HumanEval/48", "solution": "text = input('Input string: ')"}
{"task_id": "HumanEval/49", "solution": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0: return 1\n    if n % 2 == 0: return modp(n // 2, p) * modp(n // 2, p) % p\n    else: return modp(n // 2, p) * modp(n // 2, p) % p * 2 % p"}
{"task_id": "HumanEval/50", "solution": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n#     return encode_shift(s) # this is the same as the function above. I just put it here for clarity.\n    return encode_shift(s[::-1]) # this is the same as the function above. I just put it here for clarity."}
{"task_id": "HumanEval/51", "solution": "def remove_vowels(text):\n    vowels = \"aeiou\"\n    new_text = \"\"\n    for char in text:\n        if char not in vowels:\n            new_text += char\n    return new_text"}
{"task_id": "HumanEval/52", "solution": ""}
{"task_id": "HumanEval/53", "solution": ""}
{"task_id": "HumanEval/54", "solution": ""}
{"task_id": "HumanEval/55", "solution": ""}
{"task_id": "HumanEval/56", "solution": ""}
{"task_id": "HumanEval/57", "solution": ""}
{"task_id": "HumanEval/58", "solution": ""}
{"task_id": "HumanEval/59", "solution": ""}
{"task_id": "HumanEval/60", "solution": ""}
{"task_id": "HumanEval/61", "solution": ""}
{"task_id": "HumanEval/62", "solution": ""}
{"task_id": "HumanEval/63", "solution": ""}
{"task_id": "HumanEval/64", "solution": "FIX = \"\"\"\nAdd more test cases.\n\"\"\""}
{"task_id": "HumanEval/65", "solution": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    s = str(x)\n    if shift > len(s):\n        s = s[len(s)-shift:] + s[:len(s)-shift]\n    else:\n        s = s[len(s)-shift:] + s[:len(s)-shift]\n    return s"}
{"task_id": "HumanEval/66", "solution": ""}
{"task_id": "HumanEval/67", "solution": ""}
{"task_id": "HumanEval/68", "solution": ""}
{"task_id": "HumanEval/69", "solution": ""}
{"task_id": "HumanEval/70", "solution": "def strange_sort_list(lst):\n    if not lst: return []\n    min_ = min(lst)\n    max_ = max(lst)\n    new_list = []\n    while min_!= max_:\n        new_list.append(min_)\n        new_list.append(max_)\n        min_, max_, = max_, min_,\n    new_list.append(min_)\n    return new_list"}
{"task_id": "HumanEval/71", "solution": ""}
{"task_id": "HumanEval/72", "solution": ""}
{"task_id": "HumanEval/73", "solution": ""}
{"task_id": "HumanEval/74", "solution": ""}
{"task_id": "HumanEval/75", "solution": ""}
{"task_id": "HumanEval/76", "solution": ""}
{"task_id": "HumanEval/77", "solution": ""}
{"task_id": "HumanEval/78", "solution": ""}
{"task_id": "HumanEval/79", "solution": ""}
{"task_id": "HumanEval/80", "solution": ""}
{"task_id": "HumanEval/81", "solution": ""}
{"task_id": "HumanEval/82", "solution": ""}
{"task_id": "HumanEval/83", "solution": ""}
{"task_id": "HumanEval/84", "solution": ""}
{"task_id": "HumanEval/85", "solution": ""}
{"task_id": "HumanEval/86", "solution": ""}
{"task_id": "HumanEval/87", "solution": ""}
{"task_id": "HumanEval/88", "solution": ""}
{"task_id": "HumanEval/89", "solution": ""}
{"task_id": "HumanEval/90", "solution": ""}
{"task_id": "HumanEval/91", "solution": ""}
{"task_id": "HumanEval/92", "solution": ""}
{"task_id": "HumanEval/93", "solution": ""}
{"task_id": "HumanEval/94", "solution": ""}
{"task_id": "HumanEval/95", "solution": ""}
{"task_id": "HumanEval/96", "solution": ""}
{"task_id": "HumanEval/97", "solution": ""}
{"task_id": "HumanEval/98", "solution": ""}
{"task_id": "HumanEval/99", "solution": ""}
{"task_id": "HumanEval/100", "solution": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    return [n] + [n + 2 if n % 2 else n + 1 for n in make_a_pile(n // 2)] if n > 1 else []"}
{"task_id": "HumanEval/101", "solution": "def words_string(s):\n    return s.split()"}
{"task_id": "HumanEval/102", "solution": ""}
{"task_id": "HumanEval/103", "solution": ""}
{"task_id": "HumanEval/104", "solution": ""}
{"task_id": "HumanEval/105", "solution": ""}
{"task_id": "HumanEval/106", "solution": ""}
{"task_id": "HumanEval/107", "solution": ""}
{"task_id": "HumanEval/108", "solution": ""}
{"task_id": "HumanEval/109", "solution": ""}
{"task_id": "HumanEval/110", "solution": ""}
{"task_id": "HumanEval/111", "solution": ""}
{"task_id": "HumanEval/112", "solution": "def reverse_delete(s, c):\n    return (\"\".join([x for x in s if x not in c]), s == s[::-1])"}
{"task_id": "HumanEval/113", "solution": "list_2 = [4, 5, 6]\nlist_3 = [7, 8, 9]\nlist_4 = [10, 11, 12]\nlist_5 = [13, 14, 15]\nlist_6 = [16, 17, 18]\nlist_7 = [19, 20, 21]\nlist_8 = [22, 23, 24]\nlist_9 = [25, 26, 27]\nlist_10 = [28, 29, 30]\nlist_11 = [31, 32, 33]\nlist_12 = [34, 35, 36]\nlist_13 = [37, 38, 39]\nlist_14 = [40, 41, 42]\nlist_15 = [43, 44, 45]"}
{"task_id": "HumanEval/114", "solution": ""}
{"task_id": "HumanEval/115", "solution": "import math"}
{"task_id": "HumanEval/116", "solution": ""}
{"task_id": "HumanEval/117", "solution": ""}
{"task_id": "HumanEval/118", "solution": ""}
{"task_id": "HumanEval/119", "solution": "def match_parens(lst):\n    open_count = 0\n    for i in range(len(lst)):\n        if lst[i] == '(': open_count += 1\n        else: open_count -= 1\n        if open_count < 0: return False\n    return open_count == 0"}
{"task_id": "HumanEval/120", "solution": ""}
{"task_id": "HumanEval/121", "solution": ""}
{"task_id": "HumanEval/122", "solution": ""}
{"task_id": "HumanEval/123", "solution": ""}
{"task_id": "HumanEval/124", "solution": ""}
{"task_id": "HumanEval/125", "solution": ""}
{"task_id": "HumanEval/126", "solution": "t):\n    for i in range(len(lst)):\n        if i == len(lst) - 1:\n            return True\n        if lst[i] > lst[i + 1]:\n            return False\ndef is_sorted(l"}
{"task_id": "HumanEval/127", "solution": ""}
{"task_id": "HumanEval/128", "solution": ""}
{"task_id": "HumanEval/129", "solution": ""}
{"task_id": "HumanEval/130", "solution": ""}
{"task_id": "HumanEval/131", "solution": ""}
{"task_id": "HumanEval/132", "solution": ""}
{"task_id": "HumanEval/133", "solution": ""}
{"task_id": "HumanEval/134", "solution": ""}
{"task_id": "HumanEval/135", "solution": ""}
{"task_id": "HumanEval/136", "solution": ""}
{"task_id": "HumanEval/137", "solution": ""}
{"task_id": "HumanEval/138", "solution": ""}
{"task_id": "HumanEval/139", "solution": "list_of_primes = __import__('1-list_of_primes').list_of_primes"}
{"task_id": "HumanEval/140", "solution": "def fix_spaces(text):\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\")"}
{"task_id": "HumanEval/141", "solution": ""}
{"task_id": "HumanEval/142", "solution": ""}
{"task_id": "HumanEval/143", "solution": ""}
{"task_id": "HumanEval/144", "solution": ""}
{"task_id": "HumanEval/145", "solution": "def order_by_points(l):\n    return sorted(l, key=lambda x: sum([int(i) for i in str(x)]))"}
{"task_id": "HumanEval/146", "solution": ""}
{"task_id": "HumanEval/147", "solution": ""}
{"task_id": "HumanEval/148", "solution": ""}
{"task_id": "HumanEval/149", "solution": ""}
{"task_id": "HumanEval/150", "solution": ""}
{"task_id": "HumanEval/151", "solution": ""}
{"task_id": "HumanEval/152", "solution": ""}
{"task_id": "HumanEval/153", "solution": ""}
{"task_id": "HumanEval/154", "solution": ""}
{"task_id": "HumanEval/155", "solution": ""}
{"task_id": "HumanEval/156", "solution": ""}
{"task_id": "HumanEval/157", "solution": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or c**2 + a**2 == b**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "solution": ""}
{"task_id": "HumanEval/159", "solution": ""}
{"task_id": "HumanEval/160", "solution": "operator = ['+', ':', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5"}
{"task_id": "HumanEval/161", "solution": ""}
{"task_id": "HumanEval/162", "solution": ""}
{"task_id": "HumanEval/163", "solution": ""}
