{"task_id": "HumanEval/0", "solution": "from typing import List"}
{"task_id": "HumanEval/1", "solution": "from typing import List"}
{"task_id": "HumanEval/2", "solution": ""}
{"task_id": "HumanEval/3", "solution": "from typing import List"}
{"task_id": "HumanEval/4", "solution": "from typing import List"}
{"task_id": "HumanEval/5", "solution": "from typing import List"}
{"task_id": "HumanEval/6", "solution": "from collections import namedtuple\nfrom operator import attrgetter\nfrom enum import Enum\nfrom copy import copy\nfrom math import inf\nfrom random import choice, randint\nfrom time import time\nfrom collections import Counter\nfrom operator import attrgetter\nfrom enum import Enum\nfrom copy import copy\nfrom math import inf\nfrom random import choice, randint\nfrom time import time\nfrom collections import Counter\nfrom operator import attrgetter\nfrom enum import Enum\nfrom copy import copy\nfrom math import inf"}
{"task_id": "HumanEval/7", "solution": ""}
{"task_id": "HumanEval/8", "solution": "from typing import List, Tuple"}
{"task_id": "HumanEval/9", "solution": "from typing import List, Tuple"}
{"task_id": "HumanEval/10", "solution": ""}
{"task_id": "HumanEval/11", "solution": "from typing import List"}
{"task_id": "HumanEval/12", "solution": "from typing import List, Optional, Any, cast\nfrom collections import namedtuple\nfrom operator import attrgetter\nfrom random import randint\nfrom math import floor\nfrom time import sleep\nfrom enum import Enum, auto\nfrom collections import namedtuple\nfrom operator import attrgetter\nfrom random import randint\nfrom time import sleep\nfrom enum import Enum, auto\nfrom collections import namedtuple\nfrom operator import attrgetter\nfrom random import randint\nfrom time import sleep\nfrom enum import Enum, auto\nfrom collections import name"}
{"task_id": "HumanEval/13", "solution": ""}
{"task_id": "HumanEval/14", "solution": "from typing import List"}
{"task_id": "HumanEval/15", "solution": ""}
{"task_id": "HumanEval/16", "solution": ""}
{"task_id": "HumanEval/17", "solution": "from collections import namedtuple\nfrom operator import attrgetter\nfrom operator import methodcaller\nfrom operator import itemgetter\nfrom operator import attrgetter\nfrom operator import methodcaller\nfrom operator import itemgetter\nfrom operator import attrgetter\nfrom operator import methodcaller\nfrom operator import itemgetter\nfrom operator import attrgetter\nfrom operator import methodcaller\nfrom operator import itemgetter\nfrom operator import attrgetter\nfrom operator import methodcaller\nfrom operator import itemgetter\nfrom operator import attrgetter\nfrom operator import methodcaller\nfrom operator import itemgetter\nfrom operator import attrgetter"}
{"task_id": "HumanEval/18", "solution": ""}
{"task_id": "HumanEval/19", "solution": "from typing import List"}
{"task_id": "HumanEval/20", "solution": "from typing import List, Tuple"}
{"task_id": "HumanEval/21", "solution": "from typing import List"}
{"task_id": "HumanEval/22", "solution": "from typing import List, Any"}
{"task_id": "HumanEval/23", "solution": ""}
{"task_id": "HumanEval/24", "solution": ""}
{"task_id": "HumanEval/25", "solution": "from typing import List"}
{"task_id": "HumanEval/26", "solution": "from typing import List"}
{"task_id": "HumanEval/27", "solution": ""}
{"task_id": "HumanEval/28", "solution": "from typing import List"}
{"task_id": "HumanEval/29", "solution": "from typing import List"}
{"task_id": "HumanEval/30", "solution": ""}
{"task_id": "HumanEval/31", "solution": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "solution": "import math"}
{"task_id": "HumanEval/33", "solution": ""}
{"task_id": "HumanEval/34", "solution": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))"}
{"task_id": "HumanEval/35", "solution": ""}
{"task_id": "HumanEval/36", "solution": ""}
{"task_id": "HumanEval/37", "solution": ""}
{"task_id": "HumanEval/38", "solution": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n# split string to groups. Each of length 3.\n    groups = [s[3 * i:min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n# cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [group[2:] + group[:2] if len(group) == 3 else group for group in groups]\n    return groups"}
{"task_id": "HumanEval/39", "solution": ""}
{"task_id": "HumanEval/40", "solution": ""}
{"task_id": "HumanEval/41", "solution": ""}
{"task_id": "HumanEval/42", "solution": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "solution": ""}
{"task_id": "HumanEval/44", "solution": ""}
{"task_id": "HumanEval/45", "solution": ""}
{"task_id": "HumanEval/46", "solution": ""}
{"task_id": "HumanEval/47", "solution": ""}
{"task_id": "HumanEval/48", "solution": "text = input('Input string: ')"}
{"task_id": "HumanEval/49", "solution": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0: return 1"}
{"task_id": "HumanEval/50", "solution": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n#     return encode_shift(s) # this is the same as the function above. I just put it here for clarity.\n    return encode_shift(s[::-1]) # this is the same as the function above. I just put it here for clarity."}
{"task_id": "HumanEval/51", "solution": "def remove_vowels(text):\n    vowels = \"aeiou\"\n    new_text = \"\"\n    for char in text:\n        if char not in vowels:\n            new_text += char\n    return new_text"}
{"task_id": "HumanEval/52", "solution": ""}
{"task_id": "HumanEval/53", "solution": ""}
{"task_id": "HumanEval/54", "solution": ""}
{"task_id": "HumanEval/55", "solution": ""}
{"task_id": "HumanEval/56", "solution": ""}
{"task_id": "HumanEval/57", "solution": ""}
{"task_id": "HumanEval/58", "solution": ""}
{"task_id": "HumanEval/59", "solution": ""}
{"task_id": "HumanEval/60", "solution": ""}
{"task_id": "HumanEval/61", "solution": ""}
{"task_id": "HumanEval/62", "solution": ""}
{"task_id": "HumanEval/63", "solution": ""}
{"task_id": "HumanEval/64", "solution": "FIX = \"\"\"\nAdd more test cases.\n\"\"\""}
{"task_id": "HumanEval/65", "solution": ""}
{"task_id": "HumanEval/66", "solution": ""}
{"task_id": "HumanEval/67", "solution": ""}
{"task_id": "HumanEval/68", "solution": ""}
{"task_id": "HumanEval/69", "solution": ""}
{"task_id": "HumanEval/70", "solution": "def strange_sort_list(lst):\n    if not lst: return []\n    min_ = min(lst)\n    max_ = max(lst)\n    new_list = []\n    while min_!= max_:\n        new_list.append(min_)\n        new_list.append(max_)\n        min_, max_, = max_, min_,\n    new_list.append(min_)\n    return new_list"}
{"task_id": "HumanEval/71", "solution": ""}
{"task_id": "HumanEval/72", "solution": ""}
{"task_id": "HumanEval/73", "solution": ""}
{"task_id": "HumanEval/74", "solution": ""}
{"task_id": "HumanEval/75", "solution": ""}
{"task_id": "HumanEval/76", "solution": ""}
{"task_id": "HumanEval/77", "solution": ""}
{"task_id": "HumanEval/78", "solution": ""}
{"task_id": "HumanEval/79", "solution": ""}
{"task_id": "HumanEval/80", "solution": ""}
{"task_id": "HumanEval/81", "solution": ""}
{"task_id": "HumanEval/82", "solution": ""}
{"task_id": "HumanEval/83", "solution": ""}
{"task_id": "HumanEval/84", "solution": ""}
{"task_id": "HumanEval/85", "solution": ""}
{"task_id": "HumanEval/86", "solution": ""}
{"task_id": "HumanEval/87", "solution": ""}
{"task_id": "HumanEval/88", "solution": ""}
{"task_id": "HumanEval/89", "solution": ""}
{"task_id": "HumanEval/90", "solution": ""}
{"task_id": "HumanEval/91", "solution": ""}
{"task_id": "HumanEval/92", "solution": ""}
{"task_id": "HumanEval/93", "solution": ""}
{"task_id": "HumanEval/94", "solution": ""}
{"task_id": "HumanEval/95", "solution": ""}
{"task_id": "HumanEval/96", "solution": ""}
{"task_id": "HumanEval/97", "solution": ""}
{"task_id": "HumanEval/98", "solution": ""}
{"task_id": "HumanEval/99", "solution": ""}
{"task_id": "HumanEval/100", "solution": ""}
{"task_id": "HumanEval/101", "solution": "def words_string(s):\n    return s.split()"}
{"task_id": "HumanEval/102", "solution": ""}
{"task_id": "HumanEval/103", "solution": ""}
{"task_id": "HumanEval/104", "solution": ""}
{"task_id": "HumanEval/105", "solution": ""}
{"task_id": "HumanEval/106", "solution": ""}
{"task_id": "HumanEval/107", "solution": ""}
{"task_id": "HumanEval/108", "solution": ""}
{"task_id": "HumanEval/109", "solution": ""}
{"task_id": "HumanEval/110", "solution": ""}
{"task_id": "HumanEval/111", "solution": ""}
{"task_id": "HumanEval/112", "solution": "def reverse_delete(s, c):\n    return (\"\".join([x for x in s if x not in c]), s == s[::-1])"}
{"task_id": "HumanEval/113", "solution": ""}
{"task_id": "HumanEval/114", "solution": ""}
{"task_id": "HumanEval/115", "solution": "import math"}
{"task_id": "HumanEval/116", "solution": ""}
{"task_id": "HumanEval/117", "solution": ""}
{"task_id": "HumanEval/118", "solution": ""}
{"task_id": "HumanEval/119", "solution": "def match_parens(lst):\n    open_count = 0\n    for i in range(len(lst)):\n        if lst[i] == '(': open_count += 1\n        else: open_count -= 1\n        if open_count < 0: return False\n    return open_count == 0"}
{"task_id": "HumanEval/120", "solution": ""}
{"task_id": "HumanEval/121", "solution": ""}
{"task_id": "HumanEval/122", "solution": ""}
{"task_id": "HumanEval/123", "solution": ""}
{"task_id": "HumanEval/124", "solution": ""}
{"task_id": "HumanEval/125", "solution": ""}
{"task_id": "HumanEval/126", "solution": "t):\n    for i in range(len(lst)):\n        if i == len(lst) - 1:\n            return True\n        if lst[i] > lst[i + 1]:\n            return False\ndef is_sorted(l"}
{"task_id": "HumanEval/127", "solution": ""}
{"task_id": "HumanEval/128", "solution": ""}
{"task_id": "HumanEval/129", "solution": ""}
{"task_id": "HumanEval/130", "solution": ""}
{"task_id": "HumanEval/131", "solution": ""}
{"task_id": "HumanEval/132", "solution": ""}
{"task_id": "HumanEval/133", "solution": ""}
{"task_id": "HumanEval/134", "solution": ""}
{"task_id": "HumanEval/135", "solution": ""}
{"task_id": "HumanEval/136", "solution": ""}
{"task_id": "HumanEval/137", "solution": ""}
{"task_id": "HumanEval/138", "solution": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    return n % 2 == 0 and n % 4 == 0 and n % 6 == 0 and n % 8 == 0 and n % 10 == 0 and n % 12 == 0 and n % 14 == 0 and n % 16 == 0 and n % 18 == 0 and n % 20 == 0 and n % 22"}
{"task_id": "HumanEval/139", "solution": ""}
{"task_id": "HumanEval/140", "solution": "def fix_spaces(text):\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\")"}
{"task_id": "HumanEval/141", "solution": ""}
{"task_id": "HumanEval/142", "solution": ""}
{"task_id": "HumanEval/143", "solution": ""}
{"task_id": "HumanEval/144", "solution": ""}
{"task_id": "HumanEval/145", "solution": "def order_by_points(l):\n    return sorted(l, key=lambda x: sum([int(i) for i in str(x)]))"}
{"task_id": "HumanEval/146", "solution": ""}
{"task_id": "HumanEval/147", "solution": ""}
{"task_id": "HumanEval/148", "solution": ""}
{"task_id": "HumanEval/149", "solution": ""}
{"task_id": "HumanEval/150", "solution": ""}
{"task_id": "HumanEval/151", "solution": ""}
{"task_id": "HumanEval/152", "solution": ""}
{"task_id": "HumanEval/153", "solution": ""}
{"task_id": "HumanEval/154", "solution": ""}
{"task_id": "HumanEval/155", "solution": ""}
{"task_id": "HumanEval/156", "solution": ""}
{"task_id": "HumanEval/157", "solution": ""}
{"task_id": "HumanEval/158", "solution": ""}
{"task_id": "HumanEval/159", "solution": ""}
{"task_id": "HumanEval/160", "solution": "operator = ['+', ':', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5"}
{"task_id": "HumanEval/161", "solution": ""}
{"task_id": "HumanEval/162", "solution": ""}
{"task_id": "HumanEval/163", "solution": ""}
