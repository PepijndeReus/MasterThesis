{"task_id": "HumanEval/0", "solution": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n<file_sep>/week02/day02/01-list-to-dict/main.py\n# Create a function that takes a list of strings as parameter,\n# and returns a dictionary with every string as a key and it's length as a value\n#\n# Example: [\"Hello\", \"World\", \"in\", \"a\", \"frame\"]  -> {\"Hello\": 5, \"World\": 5, \"in\": 2, \"a\": 1, \"frame\": 5}\n#\n# def to_dictionary(list_of_strings):\n#     pass\n#\n# print(to_dictionary([\"Hello\", \"World\", \"in\", \"a\", \"frame\"]))\n#\n# # should print:\n# # {\"Hello\": 5, \"World\": 5, \"in\": 2, \"a\": 1, \"frame\": 5}\n\ndef to_dictionary(list_of_strings):\n    dict = {}\n    for i in list_of_strings:\n        dict[i] = len(i)\n    return dict\n\nprint(to_dictionary([\"Hello\", \"World\", \"in\", \"a\", \"frame\"]))\n<file_sep>"}
{"task_id": "HumanEval/1", "solution": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n<file_sep>/python/tests/test_001_reverse_string.py\nfrom python.reverse_string import reverse_string\n\n\ndef test_reverse_string():\n    assert reverse_string('hello') == 'olleh'\n    assert reverse_string('hello world') == 'dlrow olleh'\n    assert reverse_string('hello world!') == '!dlrow olleh'\n<file_sep>/python/tests/test_002_reverse_words.py\nfrom python.reverse_words import reverse_words\n\n\ndef test_reverse_words():\n    assert reverse_words('hello world') == 'world hello'\n    assert reverse_words('hello world!') == '!world hello'\n    assert reverse_words('hello world!  ') == '!world hello'\n    assert reverse_words('hello world!  ') == '!world hello'\n    assert reverse_words('hello world!  ') == '!world hello'\n    assert reverse_words('hello world!  ') == '!world hello'\n    assert reverse_words('hello world!  ') == '!world hello'\n    assert reverse_words('hello world!  ') == '!world hello'\n    assert reverse_words('hello world!"}
{"task_id": "HumanEval/2", "solution": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n\ndef is_prime(number: int) -> bool:\n    \"\"\" Return True if number is prime, False otherwise.\n    >>> is_prime(11)\n    True\n    >>> is_prime(12)\n    False\n    \"\"\"\n\ndef is_perfect(number: int) -> bool:\n    \"\"\" Return True if number is perfect, False otherwise.\n    >>> is_perfect(6)\n    True\n    >>> is_perfect(12)\n    False\n    \"\"\"\n\ndef is_abundant(number: int) -> bool:\n    \"\"\" Return True if number is abundant, False otherwise.\n    >>> is_abundant(12)\n    True\n    >>> is_abundant(10)\n    False\n    \"\"\"\n\ndef is_deficient(number: int) -> bool:\n    \"\"\" Return True if number is deficient, False otherwise.\n    >>> is_deficient(12)\n    False\n    >>> is_deficient(10)\n    True\n    \"\"\"\n\ndef is_even(number: int) -> bool:\n    \"\"\" Return True if number is even, False otherwise.\n    >>> is_even(12)\n    False\n    >>> is_even(10)\n    True\n    \"\"\""}
{"task_id": "HumanEval/3", "solution": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n<file_sep>/0x00-python-hello_world/10-check_cycle.c\n#include \"lists.h\"\n\n/**\n * check_cycle - checks if a singly linked list has a cycle in it.\n * @list: the list to check\n *\n * Return: 1 if there is a cycle, 0 if not\n */\nint check_cycle(listint_t *list)\n{\n\tlistint_t *slow, *fast;\n\n\tif (list == NULL)\n\t\treturn (0);\n\n\tslow = list;\n\tfast = list;\n\n\twhile (fast && fast->next)\n\t{\n\t\tslow = slow->next;\n\t\tfast = fast->next->next;\n\n\t\tif (slow == fast)\n\t\t\treturn (1);\n\t}\n\n\treturn (0);\n}\n<file_sep>/0x01-python-if_else_loops_functions/100-print_tebahpla.py\n#!/usr/bin/python3\nfor i in range(97, 123):\n    if i % 2 == 1:\n        print(\"{}\"."}
{"task_id": "HumanEval/4", "solution": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n<file_sep>/python/src/data_structures/linked_list.py\nfrom __future__ import annotations\n\nfrom typing import Optional, Any\n\n\nclass Node:\n    \"\"\"\n    A node in a linked list.\n    \"\"\"\n\n    def __init__(self, data: Any) -> None:\n        self.data = data\n        self.next: Optional[Node] = None\n\n\nclass LinkedList:\n    \"\"\"\n    A linked list.\n    \"\"\"\n\n    def __init__(self) -> None:\n        self.head: Optional[Node] = None\n\n    def append(self, data: Any) -> None:\n        \"\"\"\n        Append a new node to the end of the list.\n        \"\"\"\n        new_node = Node(data)\n        if self.head is None:\n            self.head = new_node\n            return\n        current = self.head\n        while current.next:\n            current = current.next\n        current.next = new_node\n\n    def prepend(self, data: Any) -> None:\n        \"\"\"\n        Prepend a new node to the beginning of the list.\n        \"\"\"\n        new_node = Node(data)\n        new_node.next = self.head\n        self.head = new_node\n\n    def delete("}
{"task_id": "HumanEval/5", "solution": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n<file_sep>/week02/day02/01-list-comprehension.py\n# 1. Create a list comprehension that contains the even numbers between 1 and 20\n\n# 2. Create a list comprehension that contains the even numbers between 1 and 20\n\n# 3. Create a list comprehension that contains the even numbers between 1 and 20\n\n# 4. Create a list comprehension that contains the even numbers between 1 and 20\n\n# 5. Create a list comprehension that contains the even numbers between 1 and 20\n\n# 6. Create a list comprehension that contains the even numbers between 1 and 20\n\n# 7. Create a list comprehension that contains the even numbers between 1 and 20\n\n# 8. Create a list comprehension that contains the even numbers between 1 and 20\n\n# 9. Create a list comprehension that contains the even numbers between 1 and 20\n\n# 10. Create a list comprehension that contains the even numbers between 1 and 20\n\n# 11"}
{"task_id": "HumanEval/6", "solution": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n<file_sep>/python/tests/test_nested_parens.py\nimport unittest\n\nfrom python.nested_parens import parse_nested_parens\n\n\nclass TestNestedParens(unittest.TestCase):\n    def test_empty_string(self):\n        self.assertEqual(parse_nested_parens(''), [])\n\n    def test_single_group(self):\n        self.assertEqual(parse_nested_parens('()'), [1])\n\n    def test_two_groups(self):\n        self.assertEqual(parse_nested_parens('() ()'), [1, 1])\n\n    def test_three_groups(self):\n        self.assertEqual(parse_nested_parens('() () ()'), [1, 1, 1])\n\n    def test_four_groups(self):\n        self.assertEqual(parse_nested_parens('() () () ()'), [1, 1, 1, 1])\n\n    def test_nested_groups(self):\n        self.assertEqual(parse_nested_parens('() () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () ()"}
{"task_id": "HumanEval/7", "solution": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n<file_sep>/week02/day02/01-list-comprehension.py\n# List comprehension\n\n# 1. Create a list of the even numbers between 1 and 100\n\n# 2. Create a list of the even numbers between 1 and 100 using list comprehension\n\n# 3. Create a list of the even numbers between 1 and 100 using list comprehension\n#    and filter out the even numbers that are divisible by 3\n\n# 4. Create a list of the even numbers between 1 and 100 using list comprehension\n#    and filter out the even numbers that are divisible by 3\n#    and filter out the even numbers that are divisible by 5\n\n# 5. Create a list of the even numbers between 1 and 100 using list comprehension\n#    and filter out the even numbers that are divisible by 3\n#    and filter out the even numbers that are divisible by 5\n#    and filter out the even numbers that are divisible by 7\n\n# 6. Create a list of the even numbers between"}
{"task_id": "HumanEval/8", "solution": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n<file_sep>/week02/day02/02_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_"}
{"task_id": "HumanEval/9", "solution": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n\n#     if len(numbers) == 0:\n#         return []\n#     if len(numbers) == 1:\n#         return [numbers[0]]\n#     if len(numbers) == 2:\n#         return [max(numbers[0], numbers[1])]\n#     if len(numbers) == 3:\n#         return [max(numbers[0], numbers[1], numbers[2])]\n#     if len(numbers) == 4:\n#         return [max(numbers[0], numbers[1], numbers[2], numbers[3])]\n#     if len(numbers) == 5:\n#         return [max(numbers[0], numbers[1], numbers[2], numbers[3], numbers[4])]\n#     if len(numbers) == 6:\n#         return [max(numbers[0], numbers[1], numbers[2], numbers[3], numbers[4], numbers[5])]\n#     if len(numbers) == 7:\n#         return [max(numbers[0], numbers[1], numbers[2], numbers[3], numbers[4], numbers[5],"}
{"task_id": "HumanEval/10", "solution": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n#    print(string)\n    if is_palindrome(string):\n        return string\n    # Find the longest palindromic suffix\n    suffix = ''\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            suffix = string[:i]\n            break\n    # Find the longest prefix that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            prefix = string[i:]\n            break\n    # Return the palindrome\n    return prefix + suffix[::-1]\n\n\ndef make_palindrome_2(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest palind"}
{"task_id": "HumanEval/11", "solution": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\ndef string_xor_list(a: List[str], b: List[str]) -> List[str]:\n    \"\"\" Input are two lists of strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result as a list of strings.\n    >>> string_xor_list(['010', '110'], ['110', '010'])\n    ['100', '000']\n    \"\"\"\n\ndef string_xor_list_2(a: List[str], b: List[str]) -> List[str]:\n    \"\"\" Input are two lists of strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result as a list of strings.\n    >>> string_xor_list_2(['010', '110'], ['110', '010'])\n    ['100', '000']\n    \"\"\"\n\ndef string_xor_list_3(a: List[str], b: List[str]) -> List[str]:\n    \"\"\" Input are two lists of strings a and b consisting only of 1s"}
{"task_id": "HumanEval/12", "solution": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n<file_sep>/week02/day02/01-list-comprehension.py\n# List comprehension\n\n# 1. Create a list of the first 100 even numbers\n\n# 2. Create a list of the first 100 odd numbers\n\n# 3. Create a list of the first 100 squares\n\n# 4. Create a list of the first 100 cubes\n\n# 5. Create a list of the first 100 fibonacci numbers\n\n# 6. Create a list of the first 100 prime numbers\n\n# 7. Create a list of the first 100 palindromes\n\n# 8. Create a list of the first 100 palindromes that are also prime\n\n# 9. Create a list of the first 100 palindromes that are also prime and squares\n\n# 10. Create a list of the first 100 palindromes that are also prime and squares and cubes\n\n# 11. Create a list of the first 100 palindromes that are also prime and squares and"}
{"task_id": "HumanEval/13", "solution": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if n is prime, False otherwise\n    >>> is_prime(17)\n    True\n    >>> is_prime(12)\n    False\n    \"\"\"\n\ndef is_perfect(n: int) -> bool:\n    \"\"\" Return True if n is perfect, False otherwise\n    >>> is_perfect(6)\n    True\n    >>> is_perfect(12)\n    False\n    \"\"\"\n\ndef is_armstrong(n: int) -> bool:\n    \"\"\" Return True if n is Armstrong number, False otherwise\n    >>> is_armstrong(153)\n    True\n    >>> is_armstrong(123)\n    False\n    \"\"\"\n\ndef is_palindrome(n: int) -> bool:\n    \"\"\" Return True if n is palindrome, False otherwise\n    >>> is_palindrome(123)\n    False\n    >>> is_palindrome(121)\n    True\n    \"\"\"\n\ndef is_power_of_two(n: int) -> bool:\n    \"\"\" Return True if n is power of two, False otherwise\n    >>> is_power_of_two(16)\n    True\n    >>> is"}
{"task_id": "HumanEval/14", "solution": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n<file_sep>/0x01-python-if_else_loops_functions/10-add.py\n#!/usr/bin/python3\ndef add(a, b):\n    \"\"\"\n    Function that adds two integers and returns the result\n    \"\"\"\n    return a + b\n<file_sep>/0x01-python-if_else_loops_functions/100-print_tebahpla.py\n#!/usr/bin/python3\nfor i in range(97, 123):\n    if i % 2 == 1:\n        print(\"{}\".format(chr(i)), end=\"\")\n    else:\n        print(\"{}\".format(chr(i + 32)), end=\"\")\n<file_sep>/0x01-python-if_else_loops_functions/102-magic_calculation.py\n#!/usr/bin/python3\ndef magic_calculation(a, b):\n    \"\"\"\n    Function that does a magic calculation\n    \"\"\"\n    return a + b\n<file_sep>/0x01-python-if_else_loops_functions/10-add_integer.py\n#!/usr/bin/python3\ndef add_integer(a, b"}
{"task_id": "HumanEval/15", "solution": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n\ndef string_sequence_with_step(n: int, step: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive with step.\n    >>> string_sequence_with_step(0, 1)\n    '0'\n    >>> string_sequence_with_step(5, 1)\n    '0 1 2 3 4 5'\n    >>> string_sequence_with_step(5, 2)\n    '0 2 4 5'\n    \"\"\"\n\ndef string_sequence_with_step_and_start(n: int, step: int, start: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from start upto n inclusive with step.\n    >>> string_sequence_with_step_and_start(0, 1, 0)\n    '0'\n    >>> string_sequence_with_step_and_start(5, 1, 0)\n    '0 1 2 3 4 5'\n    >>> string_sequence_with_step_and_start(5, 2, 0)\n    '0"}
{"task_id": "HumanEval/16", "solution": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n\ndef count_distinct_characters_2(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_2('xyzXYZ')\n    3\n    >>> count_distinct_characters_2('Jerry')\n    4\n    \"\"\"\n\ndef count_distinct_characters_3(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_3('xyzXYZ')\n    3\n    >>> count_distinct_characters_3('Jerry')\n    4\n    \"\"\"\n\ndef count_distinct_characters_4(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_4('xyzXYZ')\n    3\n    >>> count_distinct_characters_4('Jerry')\n    4\n    \"\"\"\n\ndef count_distinct_characters_5(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does"}
{"task_id": "HumanEval/17", "solution": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n<file_sep>/README.md\n# Python-tasks\n\nThis repository contains tasks for Python developers.\n\n## Tasks\n\n### [Task 1](https://github.com/kostyak/Python-tasks/blob/master/task1.py)\n\nWrite a function that takes a string as an argument and returns a list of integers.\n\n### [Task 2](https://github.com/kostyak/Python-tasks/blob/master/task2.py)\n\nWrite a function that takes a string as an argument and returns a list of integers.\n\n### [Task 3](https://github.com/kostyak/Python-tasks/blob/master/task3.py)\n\nWrite a function that takes a string as an argument and returns a list of integers.\n\n### [Task 4](https://github.com/kostyak/Python-tasks/blob/master/task4.py)\n\nWrite a function that takes a string as an argument and returns a list of integers.\n\n### [Task 5](https://github.com/kostyak/Python-tasks/blob/master/task"}
{"task_id": "HumanEval/18", "solution": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n\ndef how_many_times_2(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times_2('', 'a')\n    0\n    >>> how_many_times_2('aaa', 'a')\n    3\n    >>> how_many_times_2('aaaa', 'aa')\n    3\n    \"\"\"\n\ndef how_many_times_3(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times_3('', 'a')\n    0\n    >>> how_many_times_3('aaa', 'a')\n    3\n    >>> how_many_times_3('aaaa', 'aa')\n    3\n    \"\"\"\n\ndef how_many_times_4(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times_4('', 'a')\n    0\n    >>> how_many_times_"}
{"task_id": "HumanEval/19", "solution": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n\n#    numbers = numbers.split()\n#    numbers.sort()\n#    return''.join(numbers)\n\n    return''.join(sorted(numbers.split()))\n\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert sort_numbers(\"four five\") == \"five four\", \"Four five\"\n    assert sort_numbers(\"five four\") == \"four five\", \"Five four\"\n    assert sort_numbers(\"one two three four five six seven eight nine zero\") == \"zero one two three four five six seven eight nine\", \"One two three four five six seven eight nine zero\"\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")\n<file_sep>/elementary/even_the_last.py\n\"\"\"\nYou are given an array with positive numbers and a number N. You should find the N-th\npower of the element in the array with the index N. If N is out of range then return -1.\n\nInput: Three arguments. Array, index and a number N.\nOutput: The N-th power of the element in the array with the"}
{"task_id": "HumanEval/20", "solution": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n<file_sep>/week_02/day_02/01_list_comprehension.py\n# List comprehension\n# https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions\n\n# 1. Create a list of the first 100 even numbers\n# 2. Create a list of the first 100 odd numbers\n# 3. Create a list of the first 100 squares\n# 4. Create a list of the first 100 cubes\n# 5. Create a list of the first 100 fibonacci numbers\n# 6. Create a list of the first 100 factorials\n# 7. Create a list of the first 100 palindromes\n# 8. Create a list of the first 100 prime numbers\n# 9. Create a list of the first 100 perfect numbers\n# 10. Create a list of the first 100 amicable numbers\n# 11. Create a list of the first 100 deficient numbers\n# 12. Create a list of"}
{"task_id": "HumanEval/21", "solution": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n\n# BEGIN SOLUTION\n# END SOLUTION\n<file_sep>/exercises/02_lists/02_lists_02_list_comprehension.py\n\"\"\"\nExercise 2.2: List Comprehension\n\nIn this exercise, you will practice using list comprehensions.\n\nThe list comprehension syntax is a way to create a list in a single line of code.\n\nFor example, the following code creates a list of the first 10 even numbers:\n\n>>> [x for x in range(10) if x % 2 == 0]\n[0, 2, 4, 6, 8]\n\nThe general syntax for a list comprehension is:\n\n[expression for variable in iterable]\n\nThe expression is evaluated for each element in the iterable.\n\nThe variable is bound to each element in the iterable.\n\nThe iterable can be any object that supports the __iter__ method.\n\nThe expression can be any Python expression.\n\nThe list comprehension is evaluated by first creating an iterator for the iterable.\n\nThen, the expression is evaluated for each element in the iterable.\n\nThe resulting values are collected into a list"}
{"task_id": "HumanEval/22", "solution": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n<file_sep>/0x01-python-if_else_loops_functions/10-add.py\n#!/usr/bin/python3\ndef add(a, b):\n    \"\"\"\n    Function that adds two integers and returns the result\n    \"\"\"\n    return a + b\n<file_sep>/0x01-python-if_else_loops_functions/100-print_tebahpla.py\n#!/usr/bin/python3\nfor i in range(97, 123):\n    if i % 2 == 1:\n        print(\"{}\".format(chr(i)), end=\"\")\n    else:\n        print(\"{}\".format(chr(i + 32)), end=\"\")\n<file_sep>/0x01-python-if_else_loops_functions/102-magic_calculation.py\n#!/usr/bin/python3\ndef magic_calculation(a, b):\n    \"\"\"\n    Function that does a magic calculation\n    \"\"\"\n    return a + b\n<file_sep>/0x01-python-if_else_loops_functions/10-add_integer.py\n#!/usr/bin/python3\ndef add_integer(a, b"}
{"task_id": "HumanEval/23", "solution": "\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n\ndef strcat(string1: str, string2: str) -> str:\n    \"\"\" Concatenate two strings\n    >>> strcat('abc', 'def')\n    'abcdef'\n    >>> strcat('abc', '')\n    'abc'\n    >>> strcat('', 'def')\n    'def'\n    \"\"\"\n\ndef strchr(string: str, char: str) -> str:\n    \"\"\" Return first occurrence of char in string\n    >>> strchr('abc', 'a')\n    'a'\n    >>> strchr('abc', 'd')\n    ''\n    >>> strchr('abc', 'c')\n    'c'\n    \"\"\"\n\ndef strchr_last(string: str, char: str) -> str:\n    \"\"\" Return last occurrence of char in string\n    >>> strchr_last('abc', 'a')\n    'a'\n    >>> strchr_last('abc', 'd')\n    ''\n    >>> strchr_last('abc', 'c')\n    'c'\n    \"\"\"\n\ndef strchr_all(string: str, char: str) -> list:\n    \"\"\" Return all occurrences of char in string\n    >>> strchr_all('abc', 'a')\n    ['a']\n    >>> strchr"}
{"task_id": "HumanEval/24", "solution": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Determine if a number is prime\n    >>> is_prime(11)\n    True\n    >>> is_prime(12)\n    False\n    \"\"\"\n\ndef is_palindrome(n: int) -> bool:\n    \"\"\" Determine if a number is a palindrome\n    >>> is_palindrome(121)\n    True\n    >>> is_palindrome(123)\n    False\n    \"\"\"\n\ndef is_armstrong(n: int) -> bool:\n    \"\"\" Determine if a number is an Armstrong number\n    >>> is_armstrong(153)\n    True\n    >>> is_armstrong(123)\n    False\n    \"\"\"\n\ndef is_perfect(n: int) -> bool:\n    \"\"\" Determine if a number is perfect\n    >>> is_perfect(6)\n    True\n    >>> is_perfect(12)\n    False\n    \"\"\"\n\ndef is_abundant(n: int) -> bool:\n    \"\"\" Determine if a number is abundant\n    >>> is_abundant(12)\n    False\n    >>> is_abundant(12)\n    True\n    \"\"\"\n\ndef is_deficient(n"}
{"task_id": "HumanEval/25", "solution": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n<file_sep>/week02/day02/01-list-comprehension.py\n# 1. Create a list comprehension that contains the even numbers between 1 and 20\n\n# 2. Create a list comprehension that contains the even numbers between 1 and 20\n\n# 3. Create a list comprehension that contains the even numbers between 1 and 20\n\n# 4. Create a list comprehension that contains the even numbers between 1 and 20\n\n# 5. Create a list comprehension that contains the even numbers between 1 and 20\n\n# 6. Create a list comprehension that contains the even numbers between 1 and 20\n\n# 7. Create a list comprehension that contains the even numbers between 1 and 20\n\n# 8. Create a list comprehension that contains the even numbers between 1 and 20\n\n# 9. Create a list comprehension that contains the even numbers between 1 and 20\n\n# 10. Create a list comprehension that contains the even numbers between 1 and 20\n\n# 11"}
{"task_id": "HumanEval/26", "solution": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n<file_sep>/python/exercises/01_lists/01_list_basics.py\n# Exercise 1: List Basics\n#\n# Write a function that takes a list of numbers and returns the sum of the\n# numbers.\n#\n# Example:\n#\n# >>> sum_list([1, 2, 3, 4])\n# 10\n#\n# Hints:\n#\n# - Use a for loop to iterate over the list.\n# - Use the += operator to add to a variable.\n# - Use the len() function to get the length of a list.\n# - Use the range() function to get a list of numbers.\n# - Use the sum() function to get the sum of a list.\n# - Use the append() method to add to a list.\n# - Use the append() method to add to a list.\n# - Use the append() method to add to a list.\n# - Use the append() method to add to a list.\n# - Use the append() method to add to a list.\n# - Use the append() method to add to a list.\n# - Use the append() method"}
{"task_id": "HumanEval/27", "solution": "\n\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" For a given string, return True if it is a palindrome.\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('hello')\n    False\n    \"\"\"\n\ndef is_anagram(string1: str, string2: str) -> bool:\n    \"\"\" For two given strings, return True if they are anagrams.\n    >>> is_anagram('hello', 'olleh')\n    True\n    >>> is_anagram('hello', 'world')\n    False\n    \"\"\"\n\ndef is_pangram(string: str) -> bool:\n    \"\"\" For a given string, return True if it is a pangram.\n    >>> is_pangram('The quick brown fox jumps over the lazy dog')\n    True\n    >>> is_pangram('The quick brown fox jumps over the lazy cat')\n    False\n    \"\"\"\n\ndef is_isogram(string: str) -> bool:\n    \"\"\" For a given string, return True if it is an isogram.\n    >>> is_isogram('hello')\n    False\n    >>> is_isogram('world')\n    True\n    \"\"\"\n"}
{"task_id": "HumanEval/28", "solution": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n<file_sep>/week02/day02/01-list-comprehension.py\n# List comprehension\n\n# 1. Create a list of the even numbers between 1 and 100\n\n# 2. Create a list of the even numbers between 1 and 100 using list comprehension\n\n# 3. Create a list of the even numbers between 1 and 100 using list comprehension\n#    and filter out the even numbers\n\n# 4. Create a list of the even numbers between 1 and 100 using list comprehension\n#    and filter out the even numbers\n#    and map the even numbers to their square\n\n# 5. Create a list of the even numbers between 1 and 100 using list comprehension\n#    and filter out the even numbers\n#    and map the even numbers to their square\n#    and sum the squares\n\n# 6. Create a list of the even numbers between 1 and 100 using list comprehension\n#    and filter out the even numbers\n#    and map the even numbers to their square\n#    and sum the squares\n#"}
{"task_id": "HumanEval/29", "solution": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n<file_sep>/02_lists/02_list_comprehensions.py\n\"\"\"\nList comprehensions are a way to create lists in a concise way.\n\nFor example, we can create a list of the first 10 even numbers like this:\n\n>>> [x for x in range(10) if x % 2 == 0]\n[0, 2, 4, 6, 8]\n\nWe can also create a list of the first 10 even numbers like this:\n\n>>> [x for x in range(10) if x % 2 == 0]\n[0, 2, 4, 6, 8]\n\nWe can also create a list of the first 10 even numbers like this:\n\n>>> [x for x in range(10) if x % 2 == 0]\n[0, 2, 4, 6, 8]\n\nWe can also create a list of the first 10 even numbers like this:\n\n>>> [x for x in range"}
{"task_id": "HumanEval/30", "solution": "\n\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [-1, -4]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-5, -3, -10]\n    \"\"\"\n\ndef get_even(l: list):\n    \"\"\"Return only even numbers in the list.\n    >>> get_even([1, 2, 3, 4, 5, 6])\n    [2, 4, 6]\n    >>> get_even([-1, 2, -4, 5, 6])\n    [2, 4, 6]\n    \"\"\"\n\ndef get_odd(l: list):\n    \"\"\"Return only odd numbers in the list.\n    >>> get_odd([1, 2, 3, 4, 5, 6])\n    [1, 3, 5]\n    >>> get_odd([-1, 2, -4, "}
{"task_id": "HumanEval/31", "solution": "\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n   "}
{"task_id": "HumanEval/32", "solution": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n#    assert len(xs) % 2 == 0, \"xs must have even number of coefficients\"\n#    assert xs[-1]!= 0, \"xs must have non zero largest coefficient\"\n    return -xs[-2] / (2 * xs[-1])\n\n\ndef find_zero_newton(xs: list, x0: float, eps: float = 1e-10):\n    \"\"\"\n    Find zero of polynomial with coefficients xs using Newton's method.\n    x0 is an initial guess.\n    eps is an error tolerance.\n    \"\"\"\n    assert len(xs) % 2 == 0, \"xs must have even number of coefficients\"\n    assert xs[-1]!= 0, \"xs must have non zero largest coefficient\"\n    assert xs[-2]!= 0, \"xs must have non zero second largest coefficient\"\n    assert xs[-3]!= 0, \"xs must have non zero third largest coefficient\"\n    assert xs[-4]!= 0, \"xs must have non zero fourth largest coefficient\"\n    assert xs[-5]!= 0, \"xs must have non zero fifth largest coefficient\"\n    assert xs[-6]!= 0, \"xs"}
{"task_id": "HumanEval/33", "solution": "\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n\ndef sort_third_2(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third_2([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third_2([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n\ndef sort_third_3(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third_3([1, 2, 3])\n    [1, 2,"}
{"task_id": "HumanEval/34", "solution": "\n\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n\ndef is_prime(n: int):\n    \"\"\"Return True if n is prime, False otherwise\n    >>> is_prime(11)\n    True\n    >>> is_prime(12)\n    False\n    \"\"\"\n\ndef is_palindrome(s: str):\n    \"\"\"Return True if s is a palindrome, False otherwise\n    >>> is_palindrome('abba')\n    True\n    >>> is_palindrome('abba')\n    False\n    \"\"\"\n\ndef is_anagram(s1: str, s2: str):\n    \"\"\"Return True if s1 is an anagram of s2, False otherwise\n    >>> is_anagram('abba', 'abba')\n    True\n    >>> is_anagram('abba', 'abba')\n    False\n    \"\"\"\n\ndef is_palindrome_v2(s: str):\n    \"\"\"Return True if s is a palindrome, False otherwise\n    >>> is_palindrome_v2('abba')\n    True\n    >>> is_palindrome_v2('abba')\n    False\n    \"\"\"\n\ndef is_anagram_v2(s1: str, s2: str):\n    \"\"\"Return True if s1 is an an"}
{"task_id": "HumanEval/35", "solution": "\n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n\ndef sum_of_elements(l: list):\n    \"\"\"Return sum of all elements in the list.\n    >>> sum_of_elements([1, 2, 3])\n    6\n    >>> sum_of_elements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    107\n    \"\"\"\n\ndef average_of_elements(l: list):\n    \"\"\"Return average of all elements in the list.\n    >>> average_of_elements([1, 2, 3])\n    2.0\n    >>> average_of_elements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1,"}
{"task_id": "HumanEval/36", "solution": "\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n\ndef fizz_buzz_2(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_2(50)\n    0\n    >>> fizz_buzz_2(78)\n    2\n    >>> fizz_buzz_2(79)\n    3\n    \"\"\"\n\ndef fizz_buzz_3(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_3(50)\n    0\n    >>> fizz_buzz_3(78)\n    2\n    >>> fizz_buzz_3(79)\n    3\n    \"\"\"\n\ndef fizz_buzz_4(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_4(50)\n    0\n    >>> fizz_buzz_4(78)\n    2\n    >>> fizz_buzz_4("}
{"task_id": "HumanEval/37", "solution": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\ndef sort_even_2(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even_2([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even_2([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\ndef sort_even_3(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even_3([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even_3([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\ndef"}
{"task_id": "HumanEval/38", "solution": "\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n#     split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[2:] + group[1:2]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef encode_vigenere(s: str, key: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_vigenere"}
{"task_id": "HumanEval/39", "solution": "\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n<file_sep>/README.md\n# Fibonacci-Prime\n\nThis is a simple python program that returns the n-th number that is a Fibonacci number and it's also prime.\n\n## Installation\n\nUse the package manager [pip](https://pip.pypa.io/en/stable/) to install Fibonacci-Prime.\n\n```bash\npip install fibonacci-prime\n```\n\n## Usage\n\n```python\nfrom fibonacci_prime import prime_fib\n\nprime_fib(1)\nprime_fib(2)\nprime_fib(3)\nprime_fib(4)\nprime_fib(5)\n```\n\n## Contributing\nPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.\n\nPlease make sure to update tests as appropriate.\n\n## License\n[MIT](https://choosealicense.com/licenses/mit/)\n<|endoftext|>"}
{"task_id": "HumanEval/40", "solution": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n\ndef triples_sum_to_zero_2(l: list):\n    \"\"\"\n    triples_sum_to_zero_2 takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero_2([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero_2([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero_2([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero_2([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero_2([1])\n    False\n    \"\"\"\n\ndef triples_sum_to_zero_3(l: list):\n    \"\"\"\n    triples_sum_to_zero_3 takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>>"}
{"task_id": "HumanEval/41", "solution": "\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n\ndef car_race_collision_2(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n\ndef car_race_collision_3(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right"}
{"task_id": "HumanEval/42", "solution": "\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n\ndef incr_list_2(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list_2([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list_2([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n\ndef incr_list_3(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list_3([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list_3([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n\ndef incr_list_4(l: list):\n    \"\"\"Return list"}
{"task_id": "HumanEval/43", "solution": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n\ndef pairs_sum_to_zero_2(l):\n    \"\"\"\n    pairs_sum_to_zero_2 takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero_2([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero_2([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero_2([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero_2([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero_2([1])\n    False\n    \"\"\"\n\ndef pairs_sum_to_zero_3(l):\n    \"\"\"\n    pairs_sum_to_zero_3 takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero_3([1, "}
{"task_id": "HumanEval/44", "solution": "\n\ndef change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\ndef change_base_recursive(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_recursive(8, 3)\n    '22'\n    >>> change_base_recursive(8, 2)\n    '1000'\n    >>> change_base_recursive(7, 2)\n    '111'\n    \"\"\"\n\ndef change_base_recursive_2(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_recursive_2(8, 3)\n    '22'\n    >>> change_base_recursive_2(8, 2)\n    '1000'\n    >>> change_base_recursive_2(7, 2)\n    '111'\n    \"\"\"\n\ndef change_base_recursive_3(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the"}
{"task_id": "HumanEval/45", "solution": "\n\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n\ndef circle_area(r):\n    \"\"\"Given radius return area for a circle.\n    >>> circle_area(5)\n    78.53981633974483\n    \"\"\"\n\ndef sphere_volume(r):\n    \"\"\"Given radius return volume for a sphere.\n    >>> sphere_volume(5)\n    523.5987755982989\n    \"\"\"\n\ndef sphere_surface_area(r):\n    \"\"\"Given radius return surface area for a sphere.\n    >>> sphere_surface_area(5)\n    314.1592653589793\n    \"\"\"\n\ndef main():\n    \"\"\"Run doctests.\"\"\"\n    import doctest\n    doctest.testmod()\n\nif __name__ == '__main__':\n    main()\n<file_sep>/README.md\n# Python-Practice\n\nThis is a repository for my Python practice.\n\n## Getting Started\n\nThese instructions will get you a copy of the project up and running on your local machine for development and testing purposes.\n\n### Prerequisites\n\nWhat things you need to install the software and how to install them\n\n```"}
{"task_id": "HumanEval/46", "solution": "\n\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n\ndef fib5(n: int):\n    \"\"\"The Fib5 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib5(0) -> 0\n    fib5(1) -> 0\n    fib5(2) -> 2\n    fib5(3) -> 0\n    fib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4) + fib5(n-5).\n    Please write a function to efficiently compute the n-th element of the fib5 number sequence.  Do not use recursion.\n    >>> fib5(5)\n    4\n    >>> fib5(6)\n    8\n    >>> fib5(7)\n    14\n    \"\"\"\n\ndef fib6(n: int):\n    \"\"\"The Fib6 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib6(0) -> 0\n    fib6(1) -> 0\n    fib6(2) -> 2\n    fib6(3) -> 0\n    fib6(n) -> fib6(n"}
{"task_id": "HumanEval/47", "solution": "\n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n\ndef mode(l: list):\n    \"\"\"Return mode of elements in the list l.\n    >>> mode([3, 1, 2, 4, 5])\n    3\n    >>> mode([-10, 4, 6, 1000, 10, 20])\n    10\n    \"\"\"\n\ndef mean(l: list):\n    \"\"\"Return mean of elements in the list l.\n    >>> mean([3, 1, 2, 4, 5])\n    3.0\n    >>> mean([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n\ndef variance(l: list):\n    \"\"\"Return variance of elements in the list l.\n    >>> variance([3, 1, 2, 4, 5])\n    2.0\n    >>> variance([-10, 4, 6, 1000, 10, 20])\n    1000000.0\n    \"\"\"\n\ndef std_dev(l: list):\n    \"\"\"Return standard deviation of elements in the list l.\n    >>> std_dev"}
{"task_id": "HumanEval/48", "solution": "\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n\ndef is_palindrome_recursive(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_recursive('')\n    True\n    >>> is_palindrome_recursive('aba')\n    True\n    >>> is_palindrome_recursive('aaaaa')\n    True\n    >>> is_palindrome_recursive('zbcd')\n    False\n    \"\"\"\n\ndef is_palindrome_recursive_2(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_recursive_2('')\n    True\n    >>> is_palindrome_recursive_2('aba')\n    True\n    >>> is_palindrome_recursive_2('aaaaa')\n    True\n    >>> is_palindrome_recursive_2('zbcd')\n    False\n    \"\"\"\n\ndef is_palindrome_recursive_3(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_recursive_3('')\n    True\n    >>> is_palindrome_recursive_3('aba')\n    True\n    >>> is_palindrome_recursive_3('aaaaa')\n    True\n    >>> is_palindrome_recursive_3('zbcd')\n    False\n    \"\"\""}
{"task_id": "HumanEval/49", "solution": "\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n#    return pow(2, n, p)\n    return 2**n % p\n\ndef modp_inv(n: int, p: int):\n    \"\"\"Return the inverse of n modulo p (be aware of numerics).\n    >>> modp_inv(3, 5)\n    3\n    >>> modp_inv(1101, 101)\n    2\n    >>> modp_inv(0, 101)\n    1\n    >>> modp_inv(3, 11)\n    8\n    >>> modp_inv(100, 101)\n    1\n    \"\"\"\n    return pow(n, p-2, p)\n\ndef modp_inv_list(n: int, p: int):\n    \"\"\"Return the inverse of n modulo p (be aware of numerics).\n    >>> modp_inv_list(3, 5)\n    3\n    >>> modp_inv_list(1101, 101)\n    2\n    >>> modp_inv_list(0, 101)\n    1\n    >>> modp_inv_list(3, 11)\n    8\n    >>> mod"}
{"task_id": "HumanEval/50", "solution": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n#    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef encode_vigenere(s: str, key: str):\n    \"\"\"\n    returns encoded string by shifting every character by the value of the key's character in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + ord(key[i % len(key)]) - 2 * ord(\"a\")) % 26) + ord(\"a\")) for i, ch in enumerate(s)])\n\n\ndef decode_vigenere(s: str, key: str):\n    \"\"\"\n    takes as input string encoded with encode_vigenere function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(key[i % len(key)]) + 2 * ord(\"a\")) % 26) + ord(\"a\")) for i, ch in enumerate(s)])\n\n\ndef encode_"}
{"task_id": "HumanEval/51", "solution": "\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiou'\n    new_text = ''\n    for char in text:\n        if char not in vowels:\n            new_text += char\n    return new_text\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n   "}
{"task_id": "HumanEval/52", "solution": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n\ndef below_threshold_2(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold_2([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold_2([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n\ndef below_threshold_3(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold_3([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold_3([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n\ndef below_threshold_4(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold_4([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold_4([1, 20, 4, 10],"}
{"task_id": "HumanEval/53", "solution": "\n\ndef add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    -1\n    >>> subtract(5, 7)\n    -2\n    \"\"\"\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \"\"\"\n\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)\n    0.6666666666666666\n    >>> divide(5, 7)\n    0.7142857142857143\n    \"\"\"\n\ndef main():\n    \"\"\"Main function\n    \"\"\"\n    print(\"Welcome to the calculator\")\n    print(\"1. Add\")\n    print(\"2. Subtract\")\n    print(\"3. Multiply\")\n    print(\"4. Divide\")\n    print(\"5. Exit\")\n    choice = input(\"Enter your choice: \")\n    if choice == \"1\":\n        x = int(input(\"Enter first number: \"))\n       "}
{"task_id": "HumanEval/54", "solution": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\ndef same_chars_2(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars_2('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars_2('abcd', 'dddddddabc')\n    True\n    >>> same_chars_2('dddddddabc', 'abcd')\n    True\n    >>> same_chars_2('eabcd', 'dddddddabc')\n    False\n    >>> same_chars_2('abcd', 'dddddddabce')\n    False\n    >>> same_chars_2('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\ndef same_chars_3(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars_3('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars_3('abcd', 'dddddddabc')\n    True\n    >>> same_chars_3('dddddddabc', 'abcd')\n    True\n    >>> same_chars_3('eabcd', 'dddddddabc')\n    False\n    >>> same"}
{"task_id": "HumanEval/55", "solution": "\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n\ndef fib_iter(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_iter(10)\n    55\n    >>> fib_iter(1)\n    1\n    >>> fib_iter(8)\n    21\n    \"\"\"\n\ndef fib_rec(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_rec(10)\n    55\n    >>> fib_rec(1)\n    1\n    >>> fib_rec(8)\n    21\n    \"\"\"\n\ndef fib_rec_memo(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_rec_memo(10)\n    55\n    >>> fib_rec_memo(1)\n    1\n    >>> fib_rec_memo(8)\n    21\n    \"\"\"\n\ndef fib_rec_memo_iter(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_rec_memo_iter(10)\n    55\n    >>> fib_rec_memo_iter(1)\n    1\n    >>> fib_rec_memo_iter(8)\n    21\n    \"\"\"\n\ndef fib_"}
{"task_id": "HumanEval/56", "solution": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\ndef count_pairs(s: str):\n    \"\"\" return the number of pairs of brackets in s.\n\n    >>> count_pairs(\"<<>>\")\n    2\n    >>> count_pairs(\"<<\")\n    1\n    >>> count_pairs(\">>\")\n    1\n    >>> count_pairs(\"\")\n    0\n    \"\"\"\n\ndef count_pairs_2(s: str):\n    \"\"\" return the number of pairs of brackets in s.\n\n    >>> count_pairs_2(\"<<>>\")\n    2\n    >>> count_pairs_2(\"<<\")\n    1\n    >>> count_pairs_2(\">>\")\n    1\n    >>> count_pairs_2(\"\")\n    0\n    \"\"\"\n\ndef count_pairs_3(s: str):\n    \"\"\" return the number of pairs of brackets in s.\n\n    >>> count_pairs_3(\"<<>>\")\n    2\n    >>> count_pairs_3(\"<<\")\n    1\n    >>> count_pairs_3(\">>\")\n    1\n    >>> count_pairs_3(\"\")\n    0\n    \"\"\"\n\ndef count_pairs_4(s: str):\n    \"\"\" return the number of pairs of brackets in s.\n\n    >>> count_pairs_4(\"<<>>\")\n    2\n    >>> count_pairs_4(\"<<\")"}
{"task_id": "HumanEval/57", "solution": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\ndef is_palindrome(s: str):\n    \"\"\"Return True if string is a palindrome.\n    >>> is_palindrome('abba')\n    True\n    >>> is_palindrome('abba')\n    True\n    >>> is_palindrome('abba')\n    True\n    >>> is_palindrome('abba')\n    True\n    >>> is_palindrome('abba')\n    True\n    >>> is_palindrome('abba')\n    True\n    >>> is_palindrome('abba')\n    True\n    >>> is_palindrome('abba')\n    True\n    >>> is_palindrome('abba')\n    True\n    >>> is_palindrome('abba')\n    True\n    >>> is_palindrome('abba')\n    True\n    >>> is_palindrome('abba')\n    True\n    >>> is_palindrome('abba')\n    True\n    >>> is_palindrome('abba')\n    True\n    >>> is_palindrome('abba')\n    True\n    >>> is_palindrome('abba')\n    True\n    >>> is_palindrome('abba')\n    True\n    >>> is_palindrome('abba')\n    True\n    >>> is_palindrome('abba')\n    True\n    >>> is_palindrome"}
{"task_id": "HumanEval/58", "solution": "\n\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n\ndef common_2(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common_2([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common_2([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n\ndef common_3(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common_3([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common_3([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n\ndef common_"}
{"task_id": "HumanEval/59", "solution": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\ndef is_prime(n: int):\n    \"\"\"Return True if n is prime, False otherwise.\n    >>> is_prime(13)\n    True\n    >>> is_prime(12)\n    False\n    \"\"\"\n\ndef is_palindrome(n: int):\n    \"\"\"Return True if n is a palindrome, False otherwise.\n    >>> is_palindrome(12321)\n    True\n    >>> is_palindrome(12345)\n    False\n    \"\"\"\n\ndef is_abundant(n: int):\n    \"\"\"Return True if n is abundant, False otherwise.\n    >>> is_abundant(12)\n    False\n    >>> is_abundant(12)\n    False\n    \"\"\"\n\ndef is_deficient(n: int):\n    \"\"\"Return True if n is deficient, False otherwise.\n    >>> is_deficient(12)\n    False\n    >>> is_deficient(12)\n    False\n    \"\"\"\n\ndef is_perfect(n: int):\n    \"\"\"Return True if n is perfect, False otherwise.\n    >>> is_perfect(12)\n    False\n    >>> is_perfect(12)\n    False\n    \"\"\"\n\ndef"}
{"task_id": "HumanEval/60", "solution": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n\ndef sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n - 1)\n\ndef sum_to_n_recursive(n: int) -> int:\n    \"\"\"sum_to_n_recursive is a function that sums numbers from 1 to n.\n    >>> sum_to_n_recursive(30)\n    465\n    >>> sum_to_n_recursive(100)\n    5050\n    >>> sum_to_n_recursive(5)\n    15\n    >>> sum_to_n_recursive(10)\n    55\n    >>> sum_to_n_recursive(1)\n    1"}
{"task_id": "HumanEval/61", "solution": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n\ndef count_pairs(s: str):\n    \"\"\" return the number of pairs of matching brackets in s.\n\n    >>> count_pairs(\"()\")\n    1\n    >>> count_pairs(\"(()())\")\n    2\n    >>> count_pairs(\"(()())(()())\")\n    4\n    >>> count_pairs(\"(()())(()(()))\")\n    6\n    \"\"\"\n\ndef count_pairs_recursive(s: str):\n    \"\"\" return the number of pairs of matching brackets in s.\n\n    >>> count_pairs_recursive(\"()\")\n    1\n    >>> count_pairs_recursive(\"(()())\")\n    2\n    >>> count_pairs_recursive(\"(()())(()())\")\n    4\n    >>> count_pairs_recursive(\"(()())(()(()))\")\n    6\n    \"\"\"\n\ndef count_pairs_recursive_2(s: str):\n    \"\"\" return the number of pairs of matching brackets in s.\n\n    >>> count_pairs_recursive_2(\"()\")\n    1\n    >>> count_pairs_recursive_2(\"(()())\")\n    2\n    >>> count_pairs_recursive_2(\"(()())(()())\")\n    4\n    >>> count_pairs_recursive_2(\"(()())(()(()))\")\n    6\n    \"\"\"\n\ndef count_"}
{"task_id": "HumanEval/62", "solution": "\n\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\ndef integrate(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return integral of this polynomial in the same form.\n    >>> integrate([3, 1, 2, 4, 5])\n    [0, 3, 1, 8, 25]\n    >>> integrate([1, 2, 3])\n    [0, 1, 3, 6]\n    \"\"\"\n\ndef evaluate(xs: list, x: float):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return the value of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    37\n    >>> evaluate([1, 2, 3], 2)\n    13\n    \"\"\"\n\ndef roots(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return a"}
{"task_id": "HumanEval/63", "solution": "\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n\ndef fibfib_rec(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib_rec(1)\n    0\n    >>> fibfib_rec(5)\n    4\n    >>> fibfib_rec(8)\n    24\n    \"\"\"\n\ndef fibfib_iter(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-"}
{"task_id": "HumanEval/64", "solution": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n\ndef test_vowels_count():\n    assert vowels_count(\"abcde\") == 2\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"ACEDYU\") == 4\n    assert vowels_count(\"ACEDYUI\") == 5\n    assert vowels_count(\"ACEDYUIO\") == 6\n    assert vowels_count(\"ACEDYUIOP\") == 7\n    assert vowels_count(\"ACEDYUIOPQ\") == 8\n    assert vowels_count(\"ACEDYUIOPQR\") == 9\n    assert vowels_count(\"ACEDYUIOPQRS\") == 10\n    assert vowels_count(\"ACEDYUIOPQRST\") == 11\n    assert vowels_count(\"ACEDYUIOPQRSTU\") == 12\n    assert vowels_count(\"ACEDYUIOPQRSTUV\") == 13\n    assert vowels_count(\"ACEDYUIOPQRSTUVW\") == 14\n    assert vowels_count(\"ACEDY"}
{"task_id": "HumanEval/65", "solution": "\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n\ndef is_palindrome(x):\n    \"\"\"Return True if x is a palindrome, False otherwise.\n    >>> is_palindrome(12321)\n    True\n    >>> is_palindrome(12345)\n    False\n    \"\"\"\n\ndef is_prime(x):\n    \"\"\"Return True if x is prime, False otherwise.\n    >>> is_prime(11)\n    True\n    >>> is_prime(12)\n    False\n    \"\"\"\n\ndef is_perfect(x):\n    \"\"\"Return True if x is perfect, False otherwise.\n    >>> is_perfect(6)\n    True\n    >>> is_perfect(12)\n    False\n    \"\"\"\n\ndef is_power(x, y):\n    \"\"\"Return True if x is a power of y, False otherwise.\n    >>> is_power(125, 5)\n    True\n    >>> is_power(125, 10)\n    False\n    \"\"\"\n\ndef is_power_of_2(x):\n    \"\"\"Return True if x is a power of 2, False otherwise.\n    >>> is_power_of_2(128)\n    True\n    >>> is_power_of_"}
{"task_id": "HumanEval/66", "solution": "\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n\ndef is_prime(n):\n    \"\"\"Task\n    Write a function that takes a number and returns True if it is a prime number and False otherwise.\n\n    Examples:\n        is_prime(1) => False\n        is_prime(2) => True\n        is_prime(3) => True\n        is_prime(4) => False\n        is_prime(5) => True\n        is_prime(6) => False\n        is_prime(7) => True\n        is_prime(8) => False\n        is_prime(9) => False\n        is_prime(10) => False\n        is_prime(11) => True\n        is_prime(12) => False\n        is_prime(13) => True\n        is_prime(14) => False\n        is_prime(15) => False\n        is_prime(16) => False\n        is_prime(17) => True\n        is_prime(18) => False\n        is_prime(19) => True\n        is_prime(20) => False\n        is_prime(21) => False\n        is_prime(22) => False\n        is_prime(23) => True"}
{"task_id": "HumanEval/67", "solution": "\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    # your code here\n    return n - s.count(\"apples\") -"}
{"task_id": "HumanEval/68", "solution": "\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation"}
{"task_id": "HumanEval/69", "solution": "\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    for i in range(len(lst)):\n        if lst.count(lst[i]) >= lst[i]:\n            return lst[i]\n    return -1\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the"}
{"task_id": "HumanEval/70", "solution": "\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return lst\n    min_val = min(lst)\n    max_val = max(lst)\n    min_val_index = lst.index(min_val)\n    max_val_index = lst.index(max_val)\n    if min_val_index > max_val_index:\n        lst[min_val_index], lst[max_val_index] = lst[max_val_index], lst[min_val_index]\n    return lst\n\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list"}
{"task_id": "HumanEval/71", "solution": "\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n\ndef is_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three \n    sides form a valid triangle. Otherwise return False\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    is_triangle(3, 4, 5) == True\n    is_triangle(1, 2, 10) == False\n    '''\n\ndef is_triangle_v2(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three \n    sides form a valid triangle. Otherwise return False\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    is_triangle_v2(3, 4, 5) == True\n    is_triangle_v2(1, 2, 10) == False\n    '''\n\ndef is_triangle_v3(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three \n    sides form a valid triangle. Otherwise return False\n    Three sides"}
{"task_id": "HumanEval/72", "solution": "\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n\ndef is_palindrome(q):\n    '''\n    Write a function that returns True if the object q is a palindrome, and False otherwise.\n\n    Example:\n    is_palindrome(\"racecar\") \u279e True\n    is_palindrome(\"tacocat\") \u279e True\n    is_palindrome(\"palindrome\") \u279e False\n    '''\n\ndef is_balanced(q):\n    '''\n    Write a function that returns True if the object q is balanced, and False otherwise.\n\n    Example:\n    is_balanced([1, 2, 3]) \u279e False\n    is_balanced([1, 2, 2]) \u279e True\n    is_balanced([1, 2, 2, 1]) \u279e True\n    '''\n\ndef is_balanced_and_palindrome(q):\n    '''\n    Write a function that returns True if the object q is balanced and a palindrome, and False otherwise.\n\n    Example:\n    is_balanced_and_palindrome([1, 2, 3]) \u279e False\n    is_balanced_and_palindrome([1, 2, 2]) \u279e False\n    is_balanced_and_palindrome([1, "}
{"task_id": "HumanEval/73", "solution": "\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\ndef smallest_change_2(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\ndef smallest_change_3(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == "}
{"task_id": "HumanEval/74", "solution": "\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()<file_sep>/python/list_comprehension.py\ndef main():\n    # List Comprehension\n    # [expression for item in list]\n    # [expression for item in list if conditional]\n    # [expression for item in list if conditional else expression]\n\n    # [expression for item in range(10)]\n    # [expression for item in range(10) if item % 2 == 0]\n    # [expression for item in range(10) if item % 2 == 0 else expression]\n\n    # [expression for item in range(10) if item % 2 == 0 if item % 3 == 0]\n    # [expression for item in range(10) if item % 2 == 0 if item % 3 == 0 else expression]\n\n    # [expression for item in range(10) if item % 2 == 0 if item % 3 == 0 if item % 4 == 0]\n    # [expression for item in range(10) if item % 2 == 0 if item % 3 == 0 if item"}
{"task_id": "HumanEval/75", "solution": "\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100:\n        for i in range(2, a):\n            if a % i == 0:\n                return False\n        return True\n    else:\n        return False\n\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100:\n        for i in range(2, a):\n            if a % i == 0:\n                return False\n        return True\n    else:\n        return False\n\ndef is_multiply_prime(a):\n    \"\"\"Write a"}
{"task_id": "HumanEval/76", "solution": "\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n\ndef is_simple_power(x, n):\n    if x == 1:\n        return True\n    if x == 0:\n        return False\n    if x < 0:\n        return False\n    if n < 0:\n        return False\n    if x == n:\n        return True\n    if x < n:\n        return False\n    if x % n == 0:\n        return is_simple_power(x / n, n)\n    return False\n\ndef is_simple_power(x, n):\n    if x == 1:\n        return True\n    if x == 0:\n        return False\n    if x < 0:\n        return False\n    if n < 0:\n        return False\n    if x == n:\n        return True\n    if x < n:\n        return False\n    if x % n == 0:\n        return is_simple_power(x / n, n)\n    return False\n\ndef is_simple_power(x, n):\n    if x == 1:\n        return True\n    if x == 0:\n        return False\n    if x < 0:\n        return False\n    if n < 0:\n        return False\n    if x == n:\n        return True\n   "}
{"task_id": "HumanEval/77", "solution": "\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n\ndef is_prime(n):\n    '''\n    Write a function that takes an integer n and returns True if n is prime.\n    Examples:\n    is_prime(1) ==> False\n    is_prime(2) ==> True\n    is_prime(3) ==> True\n    is_prime(4) ==> False\n    is_prime(5) ==> True\n    is_prime(6) ==> False\n    is_prime(7) ==> True\n    is_prime(8) ==> False\n    is_prime(9) ==> False\n    is_prime(10) ==> False\n    '''\n\ndef is_perfect(n):\n    '''\n    Write a function that takes an integer n and returns True if n is perfect.\n    Examples:\n    is_perfect(1) ==> False\n    is_perfect(2) ==> False\n    is_perfect(3) ==> False\n    is_perfect(4) ==> False\n    is_perfect(6) ==> True\n    is_perfect(28) ==> True\n    is_perfect(496) ==> True\n    is_perfect(8128) ==> True\n    '''\n\ndef is_abundant(n):\n    '''\n    Write a function that takes an integer n and"}
{"task_id": "HumanEval/78", "solution": "\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n\ndef is_prime(num):\n    \"\"\"\n    Returns True if num is prime, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_hex_primes(num):\n    \"\"\"\n    Returns the number of hexadecimal digits that are primes.\n    \"\"\"\n    count = 0\n    for char in num:\n        if is_prime(int(char, 16)):\n            count += 1\n    return count\n\ndef hex_key(num):\n    return count_hex_primes(num)\n\n# print(hex_key(\"AB\"))\n# print(hex_key(\"1077E\"))\n# print(hex_key(\"ABED1A33\"))\n# print(hex_key(\"123456789ABCDEF0\"))\n# print(hex_key(\"2020\"))\n\n# 2.\ndef is_prime(num):\n    \"\"\"\n    Returns True if num is prime, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range"}
{"task_id": "HumanEval/79", "solution": "\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n\ndef binary_to_decimal(binary):\n    \"\"\"You will be given a string of binary numbers. The function should return the decimal\n    equivalent of the binary number.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    binary_to_decimal(\"db1111db\")   # returns 15\n    binary_to_decimal(\"db100000db\") # returns 32\n    \"\"\"\n\ndef binary_to_hex(binary):\n    \"\"\"You will be given a string of binary numbers. The function should return the hexadecimal\n    equivalent of the binary number.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    binary_to_hex(\"db1111db\")   # returns \"dbFdb\"\n    binary_to_hex(\"db100000db\") # returns \"db80db\"\n    \"\"\"\n\ndef hex_to_binary(hex):\n    \"\"\"You will be given a"}
{"task_id": "HumanEval/80", "solution": "\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n\ndef is_happy(s):\n    return len(s) >= 3 and len(set(s[i:i+3]) for i in range(len(s)-2)) == len(s)-2\n\ndef is_happy(s):\n    return len(s) >= 3 and len(set(s[i:i+3]) for i in range(len(s)-2)) == len(s)-2\n\ndef is_happy(s):\n    return len(s) >= 3 and len(set(s[i:i+3]) for i in range(len(s)-2)) == len(s)-2\n\ndef is_happy(s):\n    return len(s) >= 3 and len(set(s[i:i+3]) for i in range(len(s)-2)) == len(s)-2\n\ndef is_happy(s):\n    return len(s) >= 3 and len(set(s[i:i+3]) for i in range(len(s)-2)) == len(s)-2\n\ndef is_happy(s):\n    return len(s) >= "}
{"task_id": "HumanEval/81", "solution": "\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n<file_sep>/week02/day02/01_list_comprehension.py\n# 1. Create a list comprehension that will produce the following list:\n# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# 2. Create a list comprehension that will produce the following list:\n# [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\n# 3. Create a list comprehension that will produce the following list:\n# ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J']\n\n# 4. Create a list comprehension that will produce the following list:\n# ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M"}
{"task_id": "HumanEval/82", "solution": "\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n\ndef is_palindrome(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    is a palindrome or False otherwise\n    Examples\n    is_palindrome('racecar') == True\n    is_palindrome('tacocat') == True\n    is_palindrome('hello') == False\n    \"\"\"\n\ndef is_anagram(string1, string2):\n    \"\"\"Write a function that takes two strings and returns True if they are\n    anagrams or False otherwise\n    Examples\n    is_anagram('hello', 'olleh') == True\n    is_anagram('hello', 'bye') == False\n    \"\"\"\n\ndef is_palindrome_2(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    is a palindrome or False otherwise\n    Examples\n    is_palindrome_2('racecar') == True\n    is_palindrome_2('tacocat') == True\n    is_palindrome_2('hello') == False\n    \"\"\"\n\ndef is_anagram_2(string1, string2):\n    \"\"\"Write a function that takes two strings and returns True if they are\n    anagrams or False otherwise\n    Examples\n    is_"}
{"task_id": "HumanEval/83", "solution": "\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n\ndef starts_one_ends_one(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1 and have exactly one 1.\n    \"\"\"\n\ndef starts_one_ends_two(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1 and have exactly two 1s.\n    \"\"\"\n\ndef starts_one_ends_three(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1 and have exactly three 1s.\n    \"\"\"\n\ndef starts_one_ends_four(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1 and have exactly four 1s.\n    \"\"\"\n\ndef starts_one_ends_five(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1 and have exactly five 1s."}
{"task_id": "HumanEval/84", "solution": "\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n\n#     print(bin(N))\n#     print(bin(N)[2:])\n#     print(bin(N)[2:].replace('0', ''))\n#     print(sum(map(int, bin(N)[2:].replace('0', ''))))\n#     print(sum(map(int, bin(N)[2:])))\n#     print(sum(map(int, bin(N)[2:])))\n#     print(sum(map(int, bin(N)[2:])))\n#     print(sum(map(int, bin(N)[2:])))\n#     print(sum(map(int, bin(N)[2:])))\n#     print(sum(map(int, bin(N)[2:])))\n#     print(sum(map(int, bin(N)[2:])))\n#     print(sum(map(int, bin(N)[2:])))\n#     print(sum(map(int, bin(N)[2:])))\n#     print(sum(map(int, bin(N)[2:])))\n#     print(sum(map(int, bin("}
{"task_id": "HumanEval/85", "solution": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\ndef add_all(lst):\n    \"\"\"Given a non-empty list of integers lst. add all the elements.\n\n\n    Examples:\n        add_all([4, 2, 6, 7]) ==> 19 \n    \"\"\"\n\ndef add_all_odd(lst):\n    \"\"\"Given a non-empty list of integers lst. add all the odd elements.\n\n\n    Examples:\n        add_all_odd([4, 2, 6, 7]) ==> 15 \n    \"\"\"\n\ndef add_all_even(lst):\n    \"\"\"Given a non-empty list of integers lst. add all the even elements.\n\n\n    Examples:\n        add_all_even([4, 2, 6, 7]) ==> 12 \n    \"\"\"\n\ndef add_all_odd_even(lst):\n    \"\"\"Given a non-empty list of integers lst. add all the odd elements and even elements.\n\n\n    Examples:\n        add_all_odd_even([4, 2, 6, 7]) ==> 26 \n    \"\"\"\n\ndef add_all_odd_even_odd(lst):\n    \"\"\"Given a non-empty list of integers lst. add all the odd"}
{"task_id": "HumanEval/86", "solution": "\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n    \"\"\"\n\ndef anti_shuffle_2(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle_2('Hi') returns 'Hi'\n    anti_shuffle_2('hello') returns 'ehllo'\n    anti_shuffle_2('Hello World!!!') returns 'Hello!!!Wdlor'\n    \"\"\"\n\ndef anti_shuffle_3(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle_3('Hi') returns 'Hi'\n    anti_shuffle_3('hello') returns 'ehllo'\n    anti"}
{"task_id": "HumanEval/87", "solution": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n   "}
{"task_id": "HumanEval/88", "solution": "\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\ndef sort_array(array):\n    if len(array) == 0:\n        return []\n    if len(array) == 1:\n        return array\n    if len(array) == 2:\n        if array[0] > array[1]:\n            return array[::-1]\n        else:\n            return array\n    if len(array) > 2:\n        if (array[0] + array[-1]) % 2 == 0:\n            return array[::-1]\n        else:\n            return array\n\ndef sort_array(array):\n    if len(array) == 0:\n        return []\n    if len(array) == 1:\n        return array\n    if len(array) == 2:\n        if array[0] > array[1]:\n            return array[::-1]\n        else:\n            return array\n    if len(array) > 2:\n        if (array[0] + array[-1]) % 2 == 0:\n            return array[::-1]\n        else:\n            return array\n\ndef sort_array(array):\n    if len(array) == 0:\n        return []\n    if len(array) == 1:\n        return array"}
{"task_id": "HumanEval/89", "solution": "\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n\ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string decrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift up by two multiplied to two places.\n    For example:\n    decrypt('lm') returns 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n    decrypt('kj') returns 'gf'\n    decrypt('ix') returns 'et'\n    \"\"\"\n\ndef main():\n    \"\"\"Create a function main that takes no arguments and returns no\n    values. This function should call the encrypt and decrypt functions\n    and print the results.\n    \"\"\"\n\nif __name__ == '__main__':\n    main()\n<file_sep>/week02/day02/01_list_comprehension.py\n# List Comprehension\n\n# Create a list of the first 100 even numbers\n\n# Create a list of the first 100 odd numbers\n\n# Create a list of the first 100 squares\n\n# Create a list of the first 100 cubes\n\n# Create a list of the first 100 factorial"}
{"task_id": "HumanEval/90", "solution": "\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    return min(lst[1:])\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    return min(set(lst) - {lst[0]})\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    return min(set(lst) - {lst[0]})\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    return min(set(lst) - {lst[0]})\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    return min(set(lst) - {lst[0]})\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    return min(set(lst) - {lst[0]})\n\ndef next_smallest"}
{"task_id": "HumanEval/91", "solution": "\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return S.count('I')\n\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return S.count('I')\n\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to"}
{"task_id": "HumanEval/92", "solution": "\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n\ndef any_int(x, y, z):\n    return (x + y == z) and (x, y, z).is_integer()\n\ndef any_int(x, y, z):\n    return (x + y == z) and (x, y, z).is_integer()\n\ndef any_int(x, y, z):\n    return (x + y == z) and (x, y, z).is_integer()\n\ndef any_int(x, y, z):\n    return (x + y == z) and (x, y, z).is_integer()\n\ndef any_int(x, y, z):\n    return (x + y == z) and (x, y, z).is_integer()\n\ndef any_int(x, y, z):\n    return (x + y == z) and (x, y, z).is_integer()\n\ndef any_int(x, y, z):\n    return (x + y == z) and (x, y, z).is_integer()\n\ndef any_int(x, y, z):\n    return (x + y"}
{"task_id": "HumanEval/93", "solution": "\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n\ndef encode_decode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode_decode('test')\n    'TGST'\n    >>> encode_decode('This is a message')\n    'tHKS KS C MGSSCGG'\n    >>> encode_decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n\ndef encode_decode_file(filename):\n    \"\"\"\n    Write"}
{"task_id": "HumanEval/94", "solution": "\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5"}
{"task_id": "HumanEval/95", "solution": "\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n\ndef check_dict_case(dict):\n    if dict == {}:\n        return False\n    else:\n        for key in dict:\n            if key.islower() == True:\n                return True\n            else:\n                return False\n\ndef check_dict_case(dict):\n    if dict == {}:\n        return False\n    else:\n        for key in dict:\n            if key.isupper() == True:\n                return True\n            else:\n                return False\n\ndef check_dict_case(dict):\n    if dict == {}:\n        return False\n    else:\n        for key in dict:\n            if key.islower() == True:\n                return True\n            else:\n                return False\n\ndef check_dict_case(dict):\n    if dict == {}:\n        return False\n    else:\n        for key in dict:\n            if key.isupper() == True:\n                return True\n            else:\n                return False\n\ndef check_dict_case(dict):\n    if dict == {}:\n        return False\n    else:\n        for key in dict:\n            if key.islower() == True:\n                return True\n            else:\n                return False\n\ndef check_dict_case(dict):\n    if dict == {}:"}
{"task_id": "HumanEval/96", "solution": "\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n\ndef count_up_to_2(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n\ndef count_up_to_3(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to"}
{"task_id": "HumanEval/97", "solution": "\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\ndef is_prime(n):\n    \"\"\"Complete the function that takes an integer and returns \n    True if it is prime and False otherwise.\n    Assume the input is always valid.\n    Examples:\n    is_prime(1) should return False.\n    is_prime(2) should return True.\n    is_prime(3) should return True.\n    is_prime(4) should return False.\n    is_prime(5) should return True.\n    is_prime(6) should return False.\n    is_prime(7) should return True.\n    is_prime(8) should return False.\n    is_prime(9) should return False.\n    is_prime(10) should return False.\n    \"\"\"\n\ndef is_palindrome(n):\n    \"\"\"Complete the function that takes an integer and returns \n    True if it is a palindrome and False otherwise.\n    Assume the input is always valid.\n    Examples:\n    is_palindrome(1) should return True.\n    is_palindrome(2) should return False.\n    is_palindrome(3) should return False.\n    is_palindrome(4) should return False.\n    is_palindrome(5) should return False"}
{"task_id": "HumanEval/98", "solution": "\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n\ndef count_upper_2(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper_2('aBCdEf') returns 1\n    count_upper_2('abcdefg') returns 0\n    count_upper_2('dBBE') returns 0\n    \"\"\"\n\ndef count_upper_3(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper_3('aBCdEf') returns 1\n    count_upper_3('abcdefg') returns 0\n    count_upper_3('dBBE') returns 0\n    \"\"\"\n\ndef count_upper_4(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper_4('aBCdEf') returns 1\n    count_upper_4('abcdefg') returns 0\n    count_upper_4('dBBE') returns 0\n    \"\"\"\n\ndef count_upper_5(s):\n    \"\"\"\n    Given a string s, count the number of"}
{"task_id": "HumanEval/99", "solution": "\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n\ndef is_palindrome(word):\n    '''\n    Create a function that takes a string and returns True if it's a\n    palindrome and False otherwise.\n\n    Examples\n    >>> is_palindrome(\"racecar\")\n    True\n    >>> is_palindrome(\"tacocat\")\n    False\n    '''\n\ndef is_anagram(word1, word2):\n    '''\n    Create a function that takes two strings and returns True if they are\n    anagrams and False otherwise.\n\n    Examples\n    >>> is_anagram(\"listen\", \"silent\")\n    True\n    >>> is_anagram(\"listen\", \"tinsel\")\n    False\n    '''\n\ndef is_prime(number):\n    '''\n    Create a function that takes a number and returns True if it's a\n    prime number and False otherwise.\n\n    Examples\n    >>> is_prime(1)\n    False\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    '''\n\ndef is_palindrome_prime(number):\n    '''\n    Create a function that takes a number and returns True if it's a\n    palindrome and a prime number and False otherwise.\n\n    Examples\n    >>> is_pal"}
{"task_id": "HumanEval/100", "solution": "\ndef make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\n# 2.\ndef make_a_pile_2(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile_2(3)\n    [3, 5, 7]\n    \"\"\"\n\n# 3.\ndef make_a_pile_3(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in"}
{"task_id": "HumanEval/101", "solution": "\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n\ndef words_string(s):\n    return s.split()\n\ndef words_string(s):\n    return s.split(', ')\n\ndef words_string(s):\n    return s.split(', ') if s.find(',')!= -1 else s.split(' ')\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split(' ')\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s else s.split()\n\ndef words_string(s):\n    return s.split(', ') if ',' in s"}
{"task_id": "HumanEval/102", "solution": "\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        return -1\n    if x % 2 == 0:\n        x = x\n    else:\n        x = x + 1\n    if y % 2 == 0:\n        y = y\n    else:\n        y = y - 1\n    if x > y:\n        return -1\n    else:\n        return y\n\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 1"}
{"task_id": "HumanEval/103", "solution": "\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n\ndef is_prime(n):\n    \"\"\"Return True if n is prime, False otherwise.\n    Example:\n    is_prime(1) => False\n    is_prime(2) => True\n    is_prime(3) => True\n    is_prime(4) => False\n    is_prime(5) => True\n    is_prime(6) => False\n    is_prime(7) => True\n    is_prime(8) => False\n    is_prime(9) => False\n    is_prime(10) => False\n    \"\"\"\n\ndef is_palindrome(n):\n    \"\"\"Return True if n is a palindrome, False otherwise.\n    Example:\n    is_palindrome(1) => True\n    is_palindrome(2) => False\n    is_palindrome(3) => False\n    is_palindrome(4) => False\n    is_palindrome(5) => True\n    is_palindrome(6) => False\n    is_palindrome(7) => False\n    is_palindrome(8) => False\n    is_palindrome(9) => False\n    is_palindrome(10) => False\n    \"\"\"\n\ndef is_power_of_two"}
{"task_id": "HumanEval/104", "solution": "\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\ndef unique_digits_2(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_2([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_2([152, 323, 1422, 10])\n    []\n    \"\"\"\n\ndef unique_digits_3(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_3([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_3([152, 323, 1422, 10])\n    []\n    \"\"\"\n\ndef unique_digits_4(x):\n    \"\"\"Given a list of positive integers"}
{"task_id": "HumanEval/105", "solution": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr ->"}
{"task_id": "HumanEval/106", "solution": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\ndef g(n):\n    \"\"\" Implement the function g that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 0.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    g(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\ndef h(n):\n    \"\"\" Implement the function h that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 0.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    h(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\ndef i(n):\n    \"\"\""}
{"task_id": "HumanEval/107", "solution": "\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\ndef is_prime(n):\n    \"\"\"\n    Given a positive integer n, return True if n is a prime number, otherwise return False.\n\n    Example 1:\n\n        Input: 3\n        Output: True\n        Explanation: 3 is a prime number.\n\n    Example 2:\n\n        Input: 4\n        Output: False\n        Explanation: 4 is not a prime number.\n\n    Note:\n        1. 1 <= n <= 10^5\n    \"\"\"\n\ndef is_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return True if n is a palindrome, otherwise return False.\n\n    Example 1:\n\n        Input: 3\n        Output: False\n        Explanation: 3 is not a palindrome.\n\n    Example 2:\n\n        Input: 121\n        Output: True\n        Explanation: 121 is a palindrome.\n\n    Example 3:\n\n        Input: 12321\n        Output: True\n        Explanation: 12321 is a palindrome.\n\n    Example 4:\n\n        Input: 1234\n        Output: False\n        Explanation: 1234 is not a palindrome.\n\n    Note:\n        1"}
{"task_id": "HumanEval/108", "solution": "\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n\ndef count_nums_2(arr):\n    \"\"\"\n    Write a function count_nums_2 which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums_2([]) == 0\n    >>> count_nums_2([-1, 11, -11]) == 1\n    >>> count_nums_2([1, 1, 2]) == 3\n    \"\"\"\n\ndef count_nums_3(arr):\n    \"\"\"\n    Write a function count_nums_3 which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums_3([]) == 0\n    >>> count_nums_3([-1, 11, -11]) == 1\n    >>> count_nums_"}
{"task_id": "HumanEval/109", "solution": "\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4,"}
{"task_id": "HumanEval/110", "solution": "\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n\ndef main():\n    print(exchange([1, 2, 3, 4], [1, 2, 3, 4]))\n    print(exchange([1, 2, 3, 4], [1, 5, 3, 4]))\n\nif __name__ == '__main__':\n    main()\n<file_sep>/python/leetcode/1002.py\n# https://leetcode.com/problems/find-common-characters/\n\ndef commonChars(A):\n    \"\"\"\n    :type A: List[str]\n    :rtype: List[str]\n    \"\"\"\n    if not A:\n        return []\n    if len(A) == 1:\n        return list(A[0])\n    res = list(A[0])\n    for i in range(1, len(A)):\n        res = [x for x in res if x in A[i]]\n    return res\n\ndef main():\n    print(commonChars([\"bella\",\"label\",\"roller\"]))\n    print(commonChars([\"cool\",\"lock\",\"cook\"]))\n\nif __name__ == '__main__':\n    main()\n<file_sep>/python/leetcode/1003.py\n# https"}
{"task_id": "HumanEval/111", "solution": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\ndef histogram_2(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram_2('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram_2('a b b a') == {'a': 2, 'b': 2}\n    histogram_2('a b c a b') == {'a': 2, 'b': 2}\n    histogram_2('b b b b a') == {'b': 4}\n    histogram_2('') == {}\n\n    \"\"\"\n\ndef histogram_3(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram_3('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram_3('a b b a') == {'a': "}
{"task_id": "HumanEval/112", "solution": "\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\ndef reverse_delete(s,c):\n    return (s.translate(str.maketrans(c,\"\"*len(c))),s==s[::-1])\n\ndef reverse_delete(s,c):\n    return (s.translate(str.maketrans(c,\"\"*len(c))),s==s[::-1])\n\ndef reverse_delete(s,c):\n    return (s.translate(str.maketrans(c,\"\"*len(c))),s==s[::-1])\n\ndef reverse_delete(s,c):\n    return (s.translate(str.maketrans(c,\"\"*len(c))),s==s[::-1])\n\ndef reverse_delete(s,c):\n    return (s.translate(str.maketrans(c,\"\"*len(c))),s==s[::-1])\n\ndef reverse_delete(s,c):\n    return (s.translate(str.maketrans(c,\"\"*len(c))),s==s[::-1])\n\ndef reverse_delete(s,c):\n    return (s.translate(str.maketrans(c,\"\"*len("}
{"task_id": "HumanEval/113", "solution": "\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n\ndef odd_count_2(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count_2(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count_2(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n\ndef odd_count_3(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in"}
{"task_id": "HumanEval/114", "solution": "\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\ndef maxSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the maximum sum of any non-empty sub-array\n    of nums.\n    Example\n    maxSubArraySum([2, 3, 4, 1, 2, 4]) == 10\n    maxSubArraySum([-1, -2, -3]) == 4\n    \"\"\"\n\ndef maxSubArraySum2(nums):\n    \"\"\"\n    Given an array of integers nums, find the maximum sum of any non-empty sub-array\n    of nums.\n    Example\n    maxSubArraySum2([2, 3, 4, 1, 2, 4]) == 10\n    maxSubArraySum2([-1, -2, -3]) == 4\n    \"\"\"\n\ndef maxSubArraySum3(nums):\n    \"\"\"\n    Given an array of integers nums, find the maximum sum of any non-empty sub-array\n    of nums.\n    Example\n    maxSubArraySum3([2, 3, 4, 1, 2, 4]) == 10\n    maxSubArraySum3([-1, -2, -3]) == 4\n   "}
{"task_id": "HumanEval/115", "solution": "import math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n\ndef max_fill_recursive(grid, capacity, row, col, visited, max_fill):\n    \"\"\"\n    This is a recursive solution to the max_fill problem.\n    \"\"\"\n    if row < 0 or row >= len(grid) or col < 0 or col >= len(grid[0]) or grid[row][col] == 0 or visited[row][col]:\n        return max_fill\n\n    visited[row][col] = True\n    max_fill += 1\n\n    max_fill = max_fill_recursive(grid, capacity, row - 1, col, visited, max_fill)\n    max_fill = max_fill_recursive(grid, capacity, row + 1, col, visited, max_fill)\n    max_fill = max_fill_recursive(grid, capacity, row, col - 1, visited, max_fill)\n    max_fill = max_fill_recursive(grid, capacity, row, col + 1, visited, max_fill)\n\n    return max_fill\n\ndef max_fill_iterative(grid, capacity):\n    \"\"\"\n    This is an iterative solution to the max_fill problem.\n    \"\"\"\n    max_"}
{"task_id": "HumanEval/116", "solution": "\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (x.count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (x.count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (x.count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (x.count('1'), x))\n\ndef sort_array(arr):\n    return sorted(arr, key="}
{"task_id": "HumanEval/117", "solution": "\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n        if count_consonants(word) == n:\n            result.append(word)\n    return result\n\ndef count_consonants(word):\n    \"\"\"Given a string word, you have been tasked to implement a function that \n    returns the"}
{"task_id": "HumanEval/118", "solution": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\ndef get_closest_vowel(word):\n    vowels = \"aeiou\"\n    word = word.lower()\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels:\n            for j in range(i-1, -1, -1):\n                if word[j] not in vowels:\n                    return word[i]\n    return \"\"\n\ndef get_closest_vowel(word):\n    vowels = \"aeiou\"\n    word = word.lower()\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels:\n            for j in range(i-1, -1, -1):\n                if word[j] not in vowels:\n                    return word[i]\n    return \"\"\n\ndef get_closest_vowel(word):\n    vowels = \"aeiou\"\n    word = word.lower()\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels:\n            for j in range(i-1, -1"}
{"task_id": "HumanEval/119", "solution": "\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    return 'Yes' if len(lst) == 2 and lst[0][-1] == lst[1][0] else 'No'\n\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be"}
{"task_id": "HumanEval/120", "solution": "\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\ndef minimum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the minimum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [-4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [-3]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\ndef maximum_subarray(arr):\n    \"\"\"\n    Given an array arr of integers, return the maximum subarray sum.\n\n    Example 1:\n\n        Input: arr = [1, 2,"}
{"task_id": "HumanEval/121", "solution": "\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n\n# + [markdown] id=\"78777777\"\n# ## 10. Write a function that takes a list of numbers and returns the sum of the second half of the list.\n#\n# Examples\n#\n# ```python\n# solution([1, 2, 3, 4, 5]) ==> 6\n# solution([1, 2, 3, 4, 5, 6]) ==> 12\n# solution([1, 2, 3, 4, 5, 6, 7]) ==> 18\n# ```\n\n# + id=\"78777777\"\n# Your code here\n\n# + [markdown] id=\"78777777\"\n# ## 11. Write a function that takes a list of numbers and returns the sum of the second half of the list.\n#\n# Examples\n#\n# ```python\n# solution([1, 2, 3, 4, 5]) ==> 6\n# solution([1, 2, 3, 4, 5, 6]) ==> 12"}
{"task_id": "HumanEval/122", "solution": "\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\ndef add_elements_2(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\ndef add_elements_3(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2."}
{"task_id": "HumanEval/123", "solution": "\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\ndef get_collatz_sequence(n):\n    \"\"\"\n    Given a positive integer n, return a list that has the collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_collatz_sequence(5) returns [5, 16, 8, 4, 2, 1] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1].\n    \"\"\"\n\ndef get_collatz_sequence_length(n):\n    \"\"\"\n    Given a positive integer n, return the length of"}
{"task_id": "HumanEval/124", "solution": "\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-20"}
{"task_id": "HumanEval/125", "solution": "\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n\ndef split_words(txt):\n    return txt.split() if'' in txt else txt.split(',') if ',' in txt else len(txt)\n\ndef split_words(txt):\n    return txt.split() if'' in txt else txt.split(',') if ',' in txt else len(txt)\n\ndef split_words(txt):\n    return txt.split() if'' in txt else txt.split(',') if ',' in txt else len(txt)\n\ndef split_words(txt):\n    return txt.split() if'' in txt else txt.split(',') if ',' in txt else len(txt)\n\ndef split_words(txt):\n    return txt.split() if'' in txt else txt.split(',') if ',' in txt else len(txt)\n\ndef split_words(txt):\n    return txt.split() if'' in txt else txt.split(',') if ',' in txt else len(txt)\n\ndef split_words(txt):\n    return txt.split() if'' in txt else txt.split(',') if ',' in txt else len(txt)\n\ndef split_words(txt):\n    return txt.split() if'' in"}
{"task_id": "HumanEval/126", "solution": "\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n\n#     if len(lst) == 1:\n#         return True\n#     if len(lst) == 0:\n#         return True\n#     if len(lst) == 2:\n#         if lst[0] < lst[1]:\n#             return True\n#         else:\n#             return False\n#     if lst[0] < lst[1]:\n#         return is_sorted(lst[1:])\n#     else:\n#         return False\n\n#     if len(lst) == 1:\n#         return True\n#     if len(lst) == 0:\n#         return True\n#     if len(lst) == 2:\n#         if lst[0] < lst[1]:\n#             return True\n#         else:\n#             return False\n#     if lst[0] < lst[1]:\n#         return is_sorted(lst[1:])\n#     else:\n#         return False\n\n#     if len(lst) == 1:\n#         return True\n#     if len(lst) == 0:\n#         return True\n#"}
{"task_id": "HumanEval/127", "solution": "\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0]"}
{"task_id": "HumanEval/128", "solution": "\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n\ndef is_prime(n):\n    \"\"\"\n    Return True if n is prime, False otherwise.\n    \"\"\"\n\ndef is_palindrome(n):\n    \"\"\"\n    Return True if n is palindrome, False otherwise.\n    \"\"\"\n\ndef is_anagram(s1, s2):\n    \"\"\"\n    Return True if s1 and s2 are anagrams, False otherwise.\n    \"\"\"\n\ndef is_palindrome_number(n):\n    \"\"\"\n    Return True if n is palindrome, False otherwise.\n    \"\"\"\n\ndef is_palindrome_string(s):\n    \"\"\"\n    Return True if s is palindrome, False otherwise.\n    \"\"\"\n\ndef is_palindrome_list(lst):\n    \"\"\"\n    Return True if lst is palindrome, False otherwise.\n    \"\"\"\n\ndef is_palindrome_tuple(tpl):\n    \"\"\"\n    Return True if tpl is palindrome, False otherwise.\n    \"\"\"\n\ndef is_palindrome_dict(dct):\n    \"\"\"\n    Return True if dct is palindrome, False otherwise.\n    \"\"\"\n\ndef is_palindrome_set(st):\n    \"\"\"\n    Return True if st is palindrome, False otherwise.\n    \"\"\"\n\ndef is"}
{"task_id": "HumanEval/129", "solution": "\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i]"}
{"task_id": "HumanEval/130", "solution": "\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n    elif"}
{"task_id": "HumanEval/131", "solution": "\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n\ndef is_prime(n):\n    \"\"\"Return True if n is prime, False otherwise.\n    \"\"\"\n\ndef is_palindrome(n):\n    \"\"\"Return True if n is a palindrome, False otherwise.\n    \"\"\"\n\ndef is_abundant(n):\n    \"\"\"Return True if n is abundant, False otherwise.\n    \"\"\"\n\ndef is_deficient(n):\n    \"\"\"Return True if n is deficient, False otherwise.\n    \"\"\"\n\ndef is_perfect(n):\n    \"\"\"Return True if n is perfect, False otherwise.\n    \"\"\"\n\ndef is_amicable(n):\n    \"\"\"Return True if n is amicable, False otherwise.\n    \"\"\"\n\ndef is_harshad(n):\n    \"\"\"Return True if n is a harshad number, False otherwise.\n    \"\"\"\n\ndef is_harshad_number(n):\n    \"\"\"Return True if n is a harshad number, False otherwise.\n    \"\"\"\n\ndef is_harshad_number(n):\n    \"\"\"Return True if n is a harshad number, False otherwise.\n    \"\"\"\n\ndef is_harshad_number(n):\n    \"\"\"Return True"}
{"task_id": "HumanEval/132", "solution": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n\ndef is_palindrome(string):\n    '''\n    Create a function that takes a string as an argument and returns True or False \n    depending on whether the input string is a palindrome or not.\n\n    is_palindrome('racecar') \u279e True\n    is_palindrome('RaceCar') \u279e False\n    is_palindrome('''\n    ''') \u279e True\n    is_palindrome('''\n    ''') \u279e True\n    '''\n\ndef is_prime(num):\n    '''\n    Create a function that takes a number as an argument and returns True or False \n    depending on whether the number is prime or not.\n\n    is_prime(1) \u279e False\n    is_prime(2) \u279e True\n    is_prime(3) \u279e True\n    is_prime(4) \u279e False\n    is_prime(9) \u279e False\n    '''\n\ndef is_same_case(string):\n    '''\n    Create a function that takes a string as an argument and returns True or False \n    depending on whether the characters in the string are all in the same case.\n\n    is_same_case('sTrING') \u279e True\n    is_same_case('sTrIng') \u279e False"}
{"task_id": "HumanEval/133", "solution": "\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n\ndef sum_squares(lst):\n    return sum([int(math.ceil(x**2)) for x in lst])\n\ndef sum_squares(lst):\n    return sum(map(lambda x: int(math.ceil(x**2)), lst))\n\ndef sum_squares(lst):\n    return sum(map(lambda x: int(math.ceil(x**2)), lst))\n\ndef sum_squares(lst):\n    return sum(map(lambda x: int(math.ceil(x**2)), lst))\n\ndef sum_squares(lst):\n    return sum(map(lambda x: int(math.ceil(x**2)), lst))\n\ndef sum_squares(lst):\n    return sum(map(lambda x: int(math.ceil(x**2)), lst))\n\ndef sum_squares(lst):\n    return sum(map(lambda x: int(math.ceil(x**2)), lst))\n\ndef sum_squares(lst):\n    return sum(map(lambda x: int(math.ceil(x**2)), lst))\n\ndef sum_squares(lst):\n    return sum(map(lambda x: int"}
{"task_id": "HumanEval/134", "solution": "\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and not txt[-1].isspace()\n\nprint(check_if_last_char_is_a_letter(\"apple pie\"))\nprint(check_if_last_char_is_a_letter(\"apple pi e\"))\nprint(check_if_last_char_is_a_letter(\"apple pi e \"))\nprint(check_if_last_char_is_a_letter(\"\"))\n\n# 10. Create a function that takes a string as an argument and returns\n# the total number of lowercase letters, uppercase letters, and\n# special characters.\n\ndef count_lower_upper_special(txt):\n    '''\n    Create a function that takes a string as an argument and returns\n    the total number of lowercase letters, uppercase letters, and\n    special characters.\n\n    Examples:\n    count_lower_upper_special(\"Hello World!\") \u279e { \"lowercase\": 1, \"uppercase\": 3, \"special\": 3 }\n    count_lower_upper_special(\"9J8W7U6T5I\") \u279e {"}
{"task_id": "HumanEval/135", "solution": "\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    for i in range(len(arr)-1):\n        if arr[i] >= arr[i+1]:\n            return i\n    return -1\n\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    for i in range(len(arr)-1):\n        if arr[i] >= arr[i+1]:\n            return i\n    return -1\n\ndef"}
{"task_id": "HumanEval/136", "solution": "\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\ndef count_letters(string):\n    '''\n    Create a function that takes a string and returns a dictionary\n    with the count of each letter in the string.\n\n    Examples:\n    count_letters('hello') == {'h': 1, 'e': 1, 'l': 2, 'o': 1}\n    count_letters('mississippi') == {'m': 1, 'i': 4,'s': 4, 'p': 2}\n    '''\n\ndef count_words(string):\n    '''\n    Create a function that takes a string and returns a dictionary\n    with the count of each word in the string.\n\n    Examples:\n    count_words('hello world') == {'hello': 1, 'world': 1}\n    count_words('hello world hello world') == {'hello': 2, 'world': 2}\n    '''\n\ndef count_words_2(string):\n    '''\n    Create a function that takes a string and returns a dictionary\n    with the count of each word in the string.\n\n    Examples:\n    count_words_2('hello world') == {'hello': 1, 'world': 1}\n    count_words_2"}
{"task_id": "HumanEval/137", "solution": "\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n\ndef compare_two(a, b):\n    \"\"\"\n    Create a function that takes two lists and returns True if they have the same length and are identical.\n    Note: The elements inside the lists do not need to be of the same type.\n\n    compare_two([1, 2, 3], [1, 2, 3]) \u279e True\n    compare_two([1, 2, 3], [1, 2, 3, 4]) \u279e False\n    compare_two([1, 2, 3], [1, 2, 3, 4, 5]) \u279e False\n    compare_two([1, 2, 3], [1, 2, 3, 4, 5, 6]) \u279e False\n    \"\"\"\n\ndef compare_three(a, b):\n    \"\"\"\n    Create a function that takes two lists and returns True if they have the same length and are identical.\n    Note: The elements inside the lists do not need to be of the same type.\n\n    compare_three([1, 2, 3], [1, 2, 3]) \u279e True\n    compare_three([1, "}
{"task_id": "HumanEval/138", "solution": "\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n\ndef is_equal_to_sum_odd(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    is_equal_to_sum_odd(4) == False\n    is_equal_to_sum_odd(6) == True\n    is_equal_to_sum_odd(8) == False\n    \"\"\"\n\ndef is_equal_to_sum_odd_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive odd and even numbers\n    Example\n    is_equal_to_sum_odd_even(4) == False\n    is_equal_to_sum_odd_even(6) == True\n    is_equal_to_sum_odd_even(8) == True\n    \"\"\"\n\ndef is_equal_to_sum_odd_even_odd(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive odd and even numbers\n    Example\n    is_equal_to_sum_odd_even_odd(4) == False\n    is_equal_to_sum_odd_even_odd"}
{"task_id": "HumanEval/139", "solution": "\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n\ndef special_factorial_recursive(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial_recursive(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n\ndef special_factorial_recursive_2(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial_recursive_2(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n\ndef special_factorial_recursive_3(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * ("}
{"task_id": "HumanEval/140", "solution": "\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\")\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\")\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text,"}
{"task_id": "HumanEval/141", "solution": "\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()<file_sep>/week02/day02/01_list_to_dict.py\n# 01_list_to_dict.py\n\n# Create a function that takes a list of strings as an argument and returns a dictionary with\n# all strings as keys and their length as values.\n\n# Examples\n# list_to_dict([\"hello\", \"world\", \"my\", \"name\", \"is\", \"Anna\"])  # => {\"hello\": 5, \"world\": 5, \"my\": 2, \"name\": 4, \"is\": 2, \"Anna\": 4}\n# list_to_dict([\"a\", \"longer\", \"string\", \"than\", \"these\"])  # => {\"a\": 1, \"longer\": 6, \"string\": 6, \"than\": 4, \"these\": 6}\n\ndef list_to_dict(list_of_strings):\n    \"\"\"Create a function that takes a list of strings as an argument and returns a dictionary with\n    all strings as keys and their length as values."}
{"task_id": "HumanEval/142", "solution": "\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0:\n            lst[i] = lst[i] ** 3\n    return sum(lst)\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square"}
{"task_id": "HumanEval/143", "solution": "\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n\ndef is_prime(n):\n    \"\"\"\n    You are given a positive integer n,\n    you have to return True if n is a prime number,\n    otherwise return False.\n\n    Example 1:\n        Input: n = 17\n        Output: True\n\n    Example 2:\n        Input: n = 18\n        Output: False\n\n    Constraints:\n        * 1 <= n <= 1000000000\n    \"\"\"\n\ndef is_palindrome(n):\n    \"\"\"\n    You are given a positive integer n,\n    you have to return True if n is a palindrome,\n    otherwise return False.\n\n    Example 1:\n        Input: n = 121\n        Output: True\n\n    Example 2:\n        Input: n = 123\n        Output: False\n\n    Constraints:\n        * 1 <= n <= 1000000000\n    \"\"\"\n\ndef is_anagram(s1, s2):\n    \"\"\"\n    You are given two strings s1 and s2,\n    you have to return True if s1 and s2 are anagrams,\n    otherwise return False.\n\n    Example 1:\n        Input: s1 = \"anagram\","}
{"task_id": "HumanEval/144", "solution": "\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    x_num, x_den = x.split(\"/\")\n    n_num, n_den = n.split(\"/\")\n    x_num = int(x_num)\n    x_den = int(x_den)\n    n_num = int(n_num)\n    n_den = int(n_den)\n    if x_num * n_num == x_den * n_den:\n        return True\n    else:\n        return False\n\ndef simplify(x, n):"}
{"task_id": "HumanEval/145", "solution": "\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\ndef order_by_length(strings):\n    \"\"\"\n    Write a function which sorts the given list of strings\n    in ascending order according to their length.\n    Note: if there are several items with same length,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_length(['a', 'aa', 'aaa', 'a', 'aaaa']) == ['a', 'a', 'a', 'aa', 'aaa']\n    >>> order_by_length([]) == []\n    \"\"\"\n\ndef order_by_last_digit(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the last digit of their absolute value.\n    Note: if there are several items with same last digit,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_last_digit([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_last_digit([]) == []\n    \"\"\"\n\ndef order_by_last_digit_and_length(strings):\n    \"\"\""}
{"task_id": "HumanEval/146", "solution": "\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and num % 10 in [1, 3, 5, 7, 9]:\n            count += 1\n    return count\n\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15"}
{"task_id": "HumanEval/147", "solution": "\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    if n < 3:\n        return 0\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a"}
{"task_id": "HumanEval/148", "solution": "\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus,"}
{"task_id": "HumanEval/149", "solution": "\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    return sorted(lst, key=lambda x: (len(x), x))\n\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is"}
{"task_id": "HumanEval/150", "solution": "\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n\ndef x_or_y_or_z(n, x, y, z):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number, the value of y if n is a composite number and \n    should return the value of z otherwise.\n\n    Examples:\n    for x_or_y_or_z(7, 34, 12, 10) == 34\n    for x_or_y_or_z(15, 8, 5, 10) == 10\n    for x_or_y_or_z(12, 8, 5, 10) == 5\n    \n    \"\"\"\n\ndef x_or_y_or_z_or_w(n, x, y, z, w):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number, the value of y if n is a composite number, \n    the value of z if n is a perfect number and should return the \n    value of w otherwise.\n\n    Examples:\n    for x_or_y_or_z_or_w(7, 34,"}
{"task_id": "HumanEval/151", "solution": "\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    return sum([x**2 for x in lst if x > 0 and x % 2 == 1])\n\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, "}
{"task_id": "HumanEval/152", "solution": "\ndef compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(game,guess)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(game,guess)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(game,guess)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(game,guess)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(game,guess)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(game,guess)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(game,guess)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip(game,guess)]\n\ndef compare(game,guess):\n    return [abs(g-s) for g,s in zip("}
{"task_id": "HumanEval/153", "solution": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',"}
{"task_id": "HumanEval/154", "solution": "\ndef cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n\ndef cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    return b in a or b in a[1:] or b in a[2:] or b in a[3:]\n\ndef cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True"}
{"task_id": "HumanEval/155", "solution": "\ndef even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\ndef is_prime(num):\n    \"\"\"Given a number, return True if it is a prime number, False otherwise.\n\n    A prime number is a number that is only divisible by itself and 1.\n\n    Example:\n        is_prime(1) ==> False\n        is_prime(2) ==> True\n        is_prime(3) ==> True\n        is_prime(4) ==> False\n    \"\"\"\n\ndef is_palindrome(num):\n    \"\"\"Given a number, return True if it is a palindrome, False otherwise.\n\n    A palindrome is a number that is the same forwards and backwards.\n\n    Example:\n        is_palindrome(123) ==> False\n        is_palindrome(1221) ==> True\n    \"\"\"\n\ndef is_armstrong(num):\n    \"\"\"Given a number, return True if it is an Armstrong number, False otherwise.\n\n    An Armstrong number is a number that is the sum of its own digits each raised to the power of the number of digits.\n\n    Example:\n        is_armstrong(153) ==> True\n        is_armstrong(123) ==> False\n    \"\"\"\n\ndef is_perfect(num):\n    \"\"\"Given a"}
{"task_id": "HumanEval/156", "solution": "\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\ndef mini_roman_to_int(roman_numeral):\n    \"\"\"\n    Given a string containing a roman numeral, return its integer value.\n    Restrictions: 1 <= len(roman_numeral) <= 1000\n\n    Examples:\n    >>> mini_roman_to_int('xix') == 19\n    >>> mini_roman_to_int('clii') == 152\n    >>> mini_roman_to_int('cdxxvi') == 426\n    \"\"\"\n\ndef int_to_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in uppercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_roman(19) == 'XIX'\n    >>> int_to_roman(152) == 'CLII'\n    >>> int_to_roman(426) == 'CDXXVI'\n    \"\"\"\n\ndef roman_to_int(roman_numeral):\n    \"\"\"\n    Given a string containing a roman numeral, return its integer value.\n    Restrictions:"}
{"task_id": "HumanEval/157", "solution": "\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n\ndef is_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a triangle, False otherwise.\n    Example:\n    is_triangle(3, 4, 5) == True\n    is_triangle(1, 2, 3) == False\n    '''\n\ndef is_equilateral(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form an equilateral triangle, False otherwise.\n    An equilateral triangle is a triangle in which all three sides are the same\n    length.\n    Example:\n    is_equilateral(3, 3, 3) == True\n    is_equilateral(3, 4, 3) == False\n    '''\n\ndef is_isosceles(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form an isosceles triangle, False otherwise.\n    An isosceles triangle is a triangle in which two sides are the same length.\n    Example:\n    is_isosce"}
{"task_id": "HumanEval/158", "solution": "\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        if len(set(word)) > max_unique_chars:\n            max_unique_chars = len(set(word))\n            max_word = word\n    return max_word\n\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string"}
{"task_id": "HumanEval/159", "solution": "\ndef eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n\ndef main():\n    print(eat(5, 6, 10))\n    print(eat(4, 8, 9))\n    print(eat(1, 10, 10))\n    print(eat(2, 11, 5))\n\nif __name__ == '__main__':\n    main()\n<file_sep>/python/codewars/7kyu/sum_of_digits_recursive.py\ndef digital_root(n):\n    \"\"\"\n    In this kata, you must create a digital root function.\n    A digital root is the recursive sum of all the digits in a number.\n    Given n, take the sum of the digits of n. If that value has more than one digit, continue reducing in this way until a single-digit number is produced. The input will be a non-negative integer.\n\n    Examples:\n    * digital_root(16) => 7\n    * digital_root(942) => 6\n    * digital_root(132189) => 6\n\n    Have fun!\n    \"\"\"\n\ndef main():\n    print(digital_root(16))\n    print(digital_root(942"}
{"task_id": "HumanEval/160", "solution": "\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Your code here\n    return 0\n\n# Test\nprint(do_algebra(['+', '*', '-'], [2, 3, 4, 5]))\nprint(do_algebra(['+', '*', '-'], [2, 3, 4, 5,"}
{"task_id": "HumanEval/161", "solution": "\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    return ''.join([c.swapcase() if c.isalpha() else c for c in s])\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    return ''.join([c.swapcase() if c.isalpha()"}
{"task_id": "HumanEval/162", "solution": "\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n\ndef md5_to_string(md5):\n    \"\"\"\n    Given a md5 hash string'md5', return its equivalent string.\n    If'md5' is an empty string, return None.\n\n    >>> md5_to_string('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n    \"\"\"\n\ndef md5_to_string_with_salt(md5, salt):\n    \"\"\"\n    Given a md5 hash string'md5' and a salt string'salt', return its\n    equivalent string.\n    If'md5' is an empty string, return None.\n\n    >>> md5_to_string_with_salt('3e25960a79dbc69b674cd4ec67a72c62','salt') == 'Hello world'\n    \"\"\"\n\ndef string_to_sha1(text):\n    \"\"\"\n    Given a string 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha1('Hello world') == '"}
{"task_id": "HumanEval/163", "solution": "\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n\ndef generate_integers_2(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers_2(2, 8) => [2, 4, 6, 8]\n    generate_integers_2(8, 2) => [2, 4, 6, 8]\n    generate_integers_2(10, 14) => []\n    \"\"\"\n\ndef generate_integers_3(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers_3(2, 8) => [2, 4, 6, 8]\n    generate_integers_3(8, 2) => [2, 4, 6, 8]\n    generate_integers_3(10, 14) => []\n    \"\"\"\n\ndef generate_integers_4(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits"}
